export default {
  "code": 0,
  "message": "操作成功！",
  "data": {
  "count": 33,
  "list": [
  {
  "meta": {
  "views": 114,
  "likes": 0,
  "comments": 0
  },
  "keyword": [
  "router",
  "javascript",
  "前端路由"
  ],
  "desc": "原生 js 实现一个前端路由 router",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-c54e7b7930922c40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013a6bc1e7805eb83db97"
  ],
  "comments": [],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5c5016a7b2e5dd7cbaabe278",
  "title": "原生 js 实现一个前端路由 router",
  "author": "biaochenxuying",
  "content": "效果图：\n\n![route-origin.gif](https://upload-images.jianshu.io/upload_images/12890819-bcd752c4d96446db.gif?imageMogr2/auto-orient/strip)\n\n项目地址：[https://github.com/biaochenxuying/route](https://github.com/biaochenxuying/route)\n\n效果体验地址：\n\n[1. 滑动效果： https://biaochenxuying.github.io/route/index.html](https://biaochenxuying.github.io/route/index.html)\n\n[2. 淡入淡出效果： https://biaochenxuying.github.io/route/index2.html](https://biaochenxuying.github.io/route/index2.html)\n\n# 1. 需求\n\n因为我司的 H 5 的项目是用原生 js 写的，要用到路由，但是现在好用的路由都是和某些框架绑定在一起的，比如 vue-router ，framework7 的路由；但是又没必要为了一个路由功能而加入一套框架，现在自己写一个轻量级的路由。\n\n# 2. 实现原理\n\n现在前端的路由实现一般有两种，一种是 Hash 路由，另外一种是 History 路由。\n\n## 2.1 History 路由\n\nHistory 接口允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录。\n\n#### 属性\n\n- History.length 是一个只读属性，返回当前 session 中的 history 个数，包含当前页面在内。举个例子，对于新开一个 tab 加载的页面当前属性返回值 1 。\n- History.state 返回一个表示历史堆栈顶部的状态的值。这是一种可以不必等待 popstate 事件而查看状态而的方式。\n\n#### 方法\n\n- History.back()\n\n前往上一页, 用户可点击浏览器左上角的返回按钮模拟此方法. 等价于 history.go(-1).\n> Note: 当浏览器会话历史记录处于第一页时调用此方法没有效果，而且也不会报错。\n\n- History.forward()\n\n在浏览器历史记录里前往下一页，用户可点击浏览器左上角的前进按钮模拟此方法. 等价于 history.go(1).\n\n> Note: 当浏览器历史栈处于最顶端时( 当前页面处于最后一页时 )调用此方法没有效果也不报错。\n\n- History.go(n)\n\n通过当前页面的相对位置从浏览器历史记录( 会话记录 )加载页面。比如：参数为 -1的时候为上一页，参数为 1 的时候为下一页. 当整数参数超出界限时 ( 译者注:原文为 When integerDelta is out of bounds )，例如: 如果当前页为第一页，前面已经没有页面了，我传参的值为 -1，那么这个方法没有任何效果也不会报错。调用没有参数的 go() 方法或者不是整数的参数时也没有效果。( 这点与支持字符串作为 url 参数的 IE 有点不同)。\n\n- history.pushState() 和 history.replaceState()\n\n这两个 API 都接收三个参数，分别是\n\n**a. 状态对象（state object）** — 一个JavaScript对象，与用 pushState() 方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate 事件都会被触发，并且事件对象的state 属性都包含历史记录条目的状态对象的拷贝。\n\n**b. 标题（title）** — FireFox 浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。\n\n**c. 地址（URL）** — 新的历史记录条目的地址。浏览器不会在调用 pushState() 方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的 URL 不一定是绝对路径；如果是相对路径，它将以当前 URL 为基准；传入的 URL 与当前 URL 应该是同源的，否则，pushState() 会抛出异常。该参数是可选的；不指定的话则为文档当前 URL。\n\n> 相同之处: 是两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。\n\n>不同之处在于: pushState 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。\n\n例子：\n\n本来的路由\n\n```\n http://biaochenxuying.cn/\n```\n\n执行：\n\n```\nwindow.history.pushState(null, null, \"http://biaochenxuying.cn/home\");\n```\n\n路由变成了：\n\n```\n http://biaochenxuying.cn/home\n```\n\n详情介绍请看：[MDN](https://developer.mozilla.org/en-US/docs/Web/API/History)\n\n## 2.2  Hash 路由\n\n我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，比如典型的回到顶部按钮原理、Github 上各个标题之间的跳转等，但是路由里的 # 不叫锚点，我们称之为 hash。\n\n现在的前端主流框架的路由实现方式都会采用 Hash 路由，本项目采用的也是。\n\n当 hash 值发生改变的时候，我们可以通过 hashchange 事件监听到，从而在回调函数里面触发某些方法。\n\n# 3. 代码实现\n\n## 3.1 简单版 - 单页面路由\n\n先看个简单版的 原生 js 模拟 Vue 路由切换。\n\n![route-vue.gif](https://upload-images.jianshu.io/upload_images/12890819-e9d933a1c6437973.gif?imageMogr2/auto-orient/strip)\n\n#### 原理\n\n- 监听 hashchange ，hash 改变的时候，根据当前的 hash 匹配相应的 html 内容，然后用 innerHTML 把 html 内容放进 router-view 里面。\n\n\n这个代码是网上的：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <meta name=\"author\" content=\"\">\n    <title>原生模拟 Vue 路由切换</title>\n    <style type=\"text/css\">\n        .router_box,\n        #router-view {\n            max-width: 1000px;\n            margin: 50px auto;\n            padding: 0 20px;\n        }\n        \n        .router_box>a {\n            padding: 0 10px;\n            color: #42b983;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"router_box\">\n        <a href=\"/home\" class=\"router\">主页</a>\n        <a href=\"/news\" class=\"router\">新闻</a>\n        <a href=\"/team\" class=\"router\">团队</a>\n        <a href=\"/about\" class=\"router\">关于</a>\n    </div>\n    <div id=\"router-view\"></div>\n    <script type=\"text/javascript\">\n        function Vue(parameters) {\n            let vue = {};\n            vue.routes = parameters.routes || [];\n            vue.init = function() {\n                document.querySelectorAll(\".router\").forEach((item, index) => {\n                    item.addEventListener(\"click\", function(e) {\n                        let event = e || window.event;\n                        event.preventDefault();\n                        window.location.hash = this.getAttribute(\"href\");\n                    }, false);\n                });\n\n                window.addEventListener(\"hashchange\", () => {\n                    vue.routerChange();\n                });\n\n                vue.routerChange();\n            };\n            vue.routerChange = () => {\n                let nowHash = window.location.hash;\n                let index = vue.routes.findIndex((item, index) => {\n                    return nowHash == ('#' + item.path);\n                });\n                if (index >= 0) {\n                    document.querySelector(\"#router-view\").innerHTML = vue.routes[index].component;\n                } else {\n                    let defaultIndex = vue.routes.findIndex((item, index) => {\n                        return item.path == '*';\n                    });\n                    if (defaultIndex >= 0) {\n                        window.location.hash = vue.routes[defaultIndex].redirect;\n                    }\n                }\n            };\n\n            vue.init();\n        }\n\n        new Vue({\n            routes: [{\n                path: '/home',\n                component: \"<h1>主页</h1><a href='https://github.com/biaochenxuying'>https://github.com/biaochenxuying</a>\"\n            }, {\n                path: '/news',\n                component: \"<h1>新闻</h1><a href='http://biaochenxuying.cn/main.html'>http://biaochenxuying.cn/main.html</a>\"\n            }, {\n                path: '/team',\n                component: '<h1>团队</h1><h4>全栈修炼</h4>'\n            }, {\n                path: '/about',\n                component: '<h1>关于</h1><h4>关注公众号：BiaoChenXuYing</h4><p>分享 WEB 全栈开发等相关的技术文章，热点资源，全栈程序员的成长之路。</p>'\n            }, {\n                path: '*',\n                redirect: '/home'\n            }]\n        });\n    </script>\n</body>\n\n</html>\n```\n\n## 3.2 复杂版 - 内联页面版，带缓存功能 \n\n首先前端用 js 实现路由的缓存功能是很难的，但像 vue-router 那种还好，因为有 vue 框架和虚拟 dom 的技术，可以保存当前页面的数据。\n\n要做缓存功能，首先要知道浏览器的 前进、刷新、回退 这三个操作。\n\n但是浏览器中主要有这几个限制：\n\n- 没有提供监听前进后退的事件\n- 不允许开发者读取浏览记录\n- 用户可以手动输入地址，或使用浏览器提供的前进后退来改变 url\n\n所以要自定义路由，解决方案是自己维护一份路由历史的记录，存在一个数组里面，从而区分 前进、刷新、回退。\n\n- url 存在于浏览记录中即为后退，后退时，把当前路由后面的浏览记录删除。\n- url 不存在于浏览记录中即为前进，前进时，往数组里面 push 当前的路由。\n- url 在浏览记录的末端即为刷新，刷新时，不对路由数组做任何操作。\n\n另外，应用的路由路径中可能允许相同的路由出现多次（例如 A -> B -> A），所以给每个路由添加一个 key 值来区分相同路由的不同实例。\n\n这个浏览记录需要存储在 sessionStorage 中，这样用户刷新后浏览记录也可以恢复。\n\n\n### 3.2.1 route.js\n\n#### 3.2.1.1 跳转方法  linkTo\n\n像 vue-router 那样，提供了一个 router-link 组件来导航，而我这个框架也提供了一个 linkTo 的方法。\n\n```\n        // 生成不同的 key \n        function genKey() {\n            var t = 'xxxxxxxx'\n            return t.replace(/[xy]/g, function(c) {\n                var r = Math.random() * 16 | 0\n                var v = c === 'x' ? r : (r & 0x3 | 0x8)\n                return v.toString(16)\n            })\n        }\n\n        // 初始化跳转方法\n        window.linkTo = function(path) {\n                if (path.indexOf(\"?\") !== -1) {\n                    window.location.hash = path + '&key=' + genKey()\n                } else {\n                    window.location.hash = path + '?key=' + genKey()\n                }\n        }\n```\n\n用法：\n\n```\n//1. 直接用 a 标签\n<a href='#/list' >列表1</a>\n\n//2. 标签加 js 调用方法\n<div onclick='linkTo(\\\"#/home\\\")'>首页</div>\n\n// 3. js 调用触发\nlinkTo(\"#/list\")\n```\n\n#### 3.2.1.2 构造函数 Router\n\n定义好要用到的变量\n\n```\nfunction Router() {\n        this.routes = {}; //保存注册的所有路由\n        this.beforeFun = null; //切换前\n        this.afterFun = null; // 切换后\n        this.routerViewId = \"#routerView\"; // 路由挂载点 \n        this.redirectRoute = null; // 路由重定向的 hash\n        this.stackPages = true; // 多级页面缓存\n        this.routerMap = []; // 路由遍历\n        this.historyFlag = '' // 路由状态，前进，回退，刷新\n        this.history = []; // 路由历史\n        this.animationName = \"slide\" // 页面切换时的动画\n    }\n```\n\n#### 3.2.1.3  实现路由功能\n\n包括：初始化、注册路由、历史记录、切换页面、切换页面的动画、切换之前的钩子、切换之后的钩子、滚动位置的处理，缓存。\n\n```\nRouter.prototype = {\n        init: function(config) {\n            var self = this;\n            this.routerMap = config ? config.routes : this.routerMap\n            this.routerViewId = config ? config.routerViewId : this.routerViewId\n            this.stackPages = config ? config.stackPages : this.stackPages\n            var name = document.querySelector('#routerView').getAttribute('data-animationName')\n            if (name) {\n                this.animationName = name\n            }\n            this.animationName = config ? config.animationName : this.animationName\n\n            if (!this.routerMap.length) {\n                var selector = this.routerViewId + \" .page\"\n                var pages = document.querySelectorAll(selector)\n                for (var i = 0; i < pages.length; i++) {\n                    var page = pages[i];\n                    var hash = page.getAttribute('data-hash')\n                    var name = hash.substr(1)\n                    var item = {\n                        path: hash,\n                        name: name,\n                        callback: util.closure(name)\n                    }\n                    this.routerMap.push(item)\n                }\n            }\n\n            this.map()\n\n            // 初始化跳转方法\n            window.linkTo = function(path) {\n                console.log('path :', path)\n                if (path.indexOf(\"?\") !== -1) {\n                    window.location.hash = path + '&key=' + util.genKey()\n                } else {\n                    window.location.hash = path + '?key=' + util.genKey()\n                }\n            }\n\n            //页面首次加载 匹配路由\n            window.addEventListener('load', function(event) {\n                // console.log('load', event);\n                self.historyChange(event)\n            }, false)\n\n            //路由切换\n            window.addEventListener('hashchange', function(event) {\n                // console.log('hashchange', event);\n                self.historyChange(event)\n            }, false)\n\n        },\n        // 路由历史纪录变化\n        historyChange: function(event) {\n            var currentHash = util.getParamsUrl();\n            var nameStr = \"router-\" + (this.routerViewId) + \"-history\"\n            this.history = window.sessionStorage[nameStr] ? JSON.parse(window.sessionStorage[nameStr]) : []\n\n            var back = false,\n                refresh = false,\n                forward = false,\n                index = 0,\n                len = this.history.length;\n\n            for (var i = 0; i < len; i++) {\n                var h = this.history[i];\n                if (h.hash === currentHash.path && h.key === currentHash.query.key) {\n                    index = i\n                    if (i === len - 1) {\n                        refresh = true\n                    } else {\n                        back = true\n                    }\n                    break;\n                } else {\n                    forward = true\n                }\n            }\n            if (back) {\n                this.historyFlag = 'back'\n                this.history.length = index + 1\n            } else if (refresh) {\n                this.historyFlag = 'refresh'\n            } else {\n                this.historyFlag = 'forward'\n                var item = {\n                    key: currentHash.query.key,\n                    hash: currentHash.path,\n                    query: currentHash.query\n                }\n                this.history.push(item)\n            }\n            console.log('historyFlag :', this.historyFlag)\n                // console.log('history :', this.history)\n            if (!this.stackPages) {\n                this.historyFlag = 'forward'\n            }\n            window.sessionStorage[nameStr] = JSON.stringify(this.history)\n            this.urlChange()\n        },\n        // 切换页面\n        changeView: function(currentHash) {\n            var pages = document.getElementsByClassName('page')\n            var previousPage = document.getElementsByClassName('current')[0]\n            var currentPage = null\n            var currHash = null\n            for (var i = 0; i < pages.length; i++) {\n                var page = pages[i];\n                var hash = page.getAttribute('data-hash')\n                page.setAttribute('class', \"page\")\n                if (hash === currentHash.path) {\n                    currHash = hash\n                    currentPage = page\n                }\n            }\n            var enterName = 'enter-' + this.animationName\n            var leaveName = 'leave-' + this.animationName\n            if (this.historyFlag === 'back') {\n                util.addClass(currentPage, 'current')\n                if (previousPage) {\n                    util.addClass(previousPage, leaveName)\n                }\n                setTimeout(function() {\n                    if (previousPage) {\n                        util.removeClass(previousPage, leaveName)\n                    }\n                }, 250);\n            } else if (this.historyFlag === 'forward' || this.historyFlag === 'refresh') {\n                if (previousPage) {\n                    util.addClass(previousPage, \"current\")\n                }\n                util.addClass(currentPage, enterName)\n                setTimeout(function() {\n                    if (previousPage) {\n                        util.removeClass(previousPage, \"current\")\n                    }\n                    util.removeClass(currentPage, enterName)\n                    util.addClass(currentPage, 'current')\n                }, 350);\n                // 前进和刷新都执行回调 与 初始滚动位置为 0\n                currentPage.scrollTop = 0\n                this.routes[currHash].callback ? this.routes[currHash].callback(currentHash) : null\n            }\n            this.afterFun ? this.afterFun(currentHash) : null\n        },\n        //路由处理\n        urlChange: function() {\n            var currentHash = util.getParamsUrl();\n            if (this.routes[currentHash.path]) {\n                var self = this;\n                if (this.beforeFun) {\n                    this.beforeFun({\n                        to: {\n                            path: currentHash.path,\n                            query: currentHash.query\n                        },\n                        next: function() {\n                            self.changeView(currentHash)\n                        }\n                    })\n                } else {\n                    this.changeView(currentHash)\n                }\n            } else {\n                //不存在的地址,重定向到默认页面\n                location.hash = this.redirectRoute\n            }\n        },\n        //路由注册\n        map: function() {\n            for (var i = 0; i < this.routerMap.length; i++) {\n                var route = this.routerMap[i]\n                if (route.name === \"redirect\") {\n                    this.redirectRoute = route.path\n                } else {\n                    this.redirectRoute = this.routerMap[0].path\n                }\n                var newPath = route.path\n                var path = newPath.replace(/\\s*/g, \"\"); //过滤空格\n                this.routes[path] = {\n                    callback: route.callback, //回调\n                }\n            }\n        },\n        //切换之前的钩子\n        beforeEach: function(callback) {\n            if (Object.prototype.toString.call(callback) === '[object Function]') {\n                this.beforeFun = callback;\n            } else {\n                console.trace('路由切换前钩子函数不正确')\n            }\n        },\n        //切换成功之后的钩子\n        afterEach: function(callback) {\n            if (Object.prototype.toString.call(callback) === '[object Function]') {\n                this.afterFun = callback;\n            } else {\n                console.trace('路由切换后回调函数不正确')\n            }\n        }\n    }\n```\n\n#### 3.2.1.4 注册到 Router 到 window 全局\n\n```\n    window.Router = Router;\n    window.router = new Router();\n```\n\n完整代码：https://github.com/biaochenxuying/route/blob/master/js/route.js\n\n\n### 3.2.2 使用方法\n\n#### 3.2.2.1 js 定义法\n\n- callback 是切换页面后，执行的回调\n\n```\n<script type=\"text/javascript\">\n        var config = {\n            routerViewId: 'routerView', // 路由切换的挂载点 id\n            stackPages: true, // 多级页面缓存\n            animationName: \"slide\", // 切换页面时的动画\n            routes: [{\n                path: \"/home\",\n                name: \"home\",\n                callback: function(route) {\n                    console.log('home:', route)\n                    var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>首页</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/list\\\")'>列表</a></div><div class='height'>内容占位</div>\"\n                    document.querySelector(\"#home\").innerHTML = str\n                }\n            }, {\n                path: \"/list\",\n                name: \"list\",\n                callback: function(route) {\n                    console.log('list:', route)\n                    var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>列表</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/detail\\\")'>详情</a></div>\"\n                    document.querySelector(\"#list\").innerHTML = str\n                }\n            }, {\n                path: \"/detail\",\n                name: \"detail\",\n                callback: function(route) {\n                    console.log('detail:', route)\n                    var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>详情</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/detail2\\\")'>详情 2</a></div><div class='height'>内容占位</div>\"\n                    document.querySelector(\"#detail\").innerHTML = str\n                }\n            }, {\n                path: \"/detail2\",\n                name: \"detail2\",\n                callback: function(route) {\n                    console.log('detail2:', route)\n                    var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>详情 2</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/home\\\")'>首页</a></div>\"\n                    document.querySelector(\"#detail2\").innerHTML = str\n                }\n            }]\n        }\n\n        //初始化路由\n        router.init(config)\n        router.beforeEach(function(transition) {\n            console.log('切换之 前 dosomething', transition)\n            setTimeout(function() {\n                //模拟切换之前延迟，比如说做个异步登录信息验证\n                transition.next()\n            }, 100)\n        })\n        router.afterEach(function(transition) {\n            console.log(\"切换之 后 dosomething\", transition)\n        })\n    </script>\n```\n\n#### 3.2.2.2 html 加 script 定义法\n\n- id=\"routerView\" ：路由切换时，页面的视图窗口\n- data-animationName=\"slide\"：切换时的动画，目前有 slide  和 fade。\n- class=\"page\": 切换的页面\n- data-hash=\"/home\"：home 是切换路由时执行的回调方法\n- window.home : 回调方法，名字要与 data-hash 的名字相同\n```\n<div id=\"routerView\" data-animationName=\"slide\">\n        <div class=\"page\" data-hash=\"/home\">\n            <div class=\"page-content\">\n                <div id=\"home\"></div>\n                <script type=\"text/javascript\">\n                    window.home = function(route) {\n                        console.log('home:', route)\n                            // var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>首页</h2> <input type='text'> <div><a href='#/list' >列表1</div></div><div class='height'>内容占位</div>\"\n                        var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>首页</h2> <input type='text'> <div><div href='javascript:void(0);' onclick='linkTo(\\\"#/list\\\")'>列表</div></div><div class='height'>内容占位</div>\"\n                        document.querySelector(\"#home\").innerHTML = str\n                    }\n                </script>\n            </div>\n        </div>\n        <div class=\"page\" data-hash=\"/list\">\n            <div class=\"page-content\">\n                <div id=\"list\"></div>\n                <div style=\"height: 700px;border: solid 1px red;background-color: #eee;margin-top: 20px;\">内容占位</div>\n\n                <script type=\"text/javascript\">\n                    window.list = function(route) {\n                        console.log('list:', route)\n                        var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>列表</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/detail\\\")'>详情</a></div>\"\n                        document.querySelector(\"#list\").innerHTML = str\n                    }\n                </script>\n            </div>\n        </div>\n        <div class=\"page\" data-hash=\"/detail\">\n            <div class=\"page-content\">\n                <div id=\"detail\"></div>\n                <script type=\"text/javascript\">\n                    window.detail = function(route) {\n                        console.log('detail:', route)\n                        var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>详情</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/detail2\\\")'>详情 2</a></div><div class='height'>内容占位</div>\"\n                        document.querySelector(\"#detail\").innerHTML = str\n                    }\n                </script>\n            </div>\n        </div>\n        <div class=\"page\" data-hash=\"/detail2\">\n            <div class=\"page-content\">\n                <div id=\"detail2\"></div>\n                <div style=\"height: 700px;border: solid 1px red;background-color: pink;margin-top: 20px;\">内容占位</div>\n\n                <script type=\"text/javascript\">\n                    window.detail2 = function(route) {\n                        console.log('detail2:', route)\n                        var str = \"<div><a class='back' onclick='window.history.go(-1)'>返回</a></div> <h2>详情 2</h2> <input type='text'> <div><a href='javascript:void(0);' onclick='linkTo(\\\"#/home\\\")'>首页</a></div>\"\n                        document.querySelector(\"#detail2\").innerHTML = str\n                    }\n                </script>\n            </div>\n        </div>\n    </div>\n    <script type=\"text/javascript\" src=\"./js/route.js\"></script>\n    <script type=\"text/javascript\">\n        router.init()\n        router.beforeEach(function(transition) {\n            console.log('切换之 前 dosomething', transition)\n            setTimeout(function() {\n                //模拟切换之前延迟，比如说做个异步登录信息验证\n                transition.next()\n            }, 100)\n        })\n        router.afterEach(function(transition) {\n            console.log(\"切换之 后 dosomething\", transition)\n        })\n    </script>\n```\n\n参考项目：https://github.com/kliuj/spa-routers\n\n# 5. 最后 \n\n项目地址：[https://github.com/biaochenxuying/route](https://github.com/biaochenxuying/route)\n\n博客常更地址1 ：[https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n博客常更地址2 ：[http://biaochenxuying.cn/main.html](http://biaochenxuying.cn/main.html)\n\n\n足足一个多月没有更新文章了，因为项目太紧，加班加班啊，趁着在家有空，赶紧写下这篇干货，免得忘记了，希望对大家有所帮助。\n\n如果您觉得这篇文章不错或者对你有所帮助，请点个赞，谢谢。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-f8665293cc8d0dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，随想随感，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "create_time": "2019-01-29T09:02:31.782Z",
  "update_time": "2019-01-29T09:02:31.782Z"
  },
  {
  "meta": {
  "views": 225,
  "likes": 15,
  "comments": 12
  },
  "keyword": [
  "js 实现上下改变父 div 的高度",
  " 左右上下动态分割孩子的宽高"
  ],
  "desc": "js 实现父 div 里面 左右，上下动态分割 div，并上下改变父 div 的高度，并且宽和高都是按百分比。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-b26f439121646da3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013a6bc1e7805eb83db97"
  ],
  "comments": [
  "5c2795cdb54f044b4f9de0ae",
  "5c405b13b2e5dd7cbaabe24a",
  "5c405b2eb2e5dd7cbaabe24b",
  "5c4170beb2e5dd7cbaabe24f",
  "5c4173a7b2e5dd7cbaabe260",
  "5c485dfbb2e5dd7cbaabe269",
  "5c48774fb2e5dd7cbaabe26d",
  "5c706f6365ccc85fa0125e99"
  ],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5c23833db54f044b4f9de0a0",
  "title": "js 实现上下改变父 div 的高度，左右上下动态分割孩子的宽高",
  "author": "biaochenxuying",
  "content": "![](https://upload-images.jianshu.io/upload_images/12890819-b26f439121646da3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 1. 需求\n\n实现父 div 里面 左右，上下动态分割 div，并上下改变父 div 的高度，并且宽和高都是按百分比（如图） 。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-afc3e32ece5f4c2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 2. 实现原理\n\n## 2.1 父布局\n\n```\n<div class='hj-wrap'>\n        <div class=\"arrow\"></div>\n    </div>\n```\n\n- 首先一个父 div 为 hj-wrap，相对定位 。\n- 一个改变父 div 高度的 arrow，用于上下拖动 , 不能占有位置，所以要绝对定位，并定位到最右下角。\n- 上下拖动的 arrow，当上拖动时，arrow 的父 div 的高度变小，当下拖动时，arrow 的父 div 的高度变大。\n\n# 2.2 横向布局\n\n```\n<div class='hj-wrap'>\n        <div class=\"hj-transverse-split-div\">\n            横 向\n            <label class=\"hj-transverse-split-label\"></label>\n        </div>\n        <div class=\"hj-transverse-split-div\">横 向 2\n            <label class=\"hj-transverse-split-label\"></label>\n        </div>\n        <div class=\"hj-transverse-split-div\">横 向 3\n            <label class=\"hj-transverse-split-label\"></label>\n        </div>\n        <div class=\"hj-transverse-split-div\">横 向 4\n            <label class=\"hj-transverse-split-label\"></label>\n        </div>\n        <div class=\"hj-transverse-split-div\">横 向 5\n        </div>\n        <div class=\"arrow\"></div>\n    </div>\n```\n \n- 每一个横向的 div 为 hj-transverse-split-div 并相对定位，里面有一个拖动改变左右的 label 为 hj-transverse-split-label ，不能占有位置，所以要绝对定位，并定位到最右边并高为 100%，最后一个横向的 div 不用 hj-transverse-split-label 。\n- 拖动改变左右的 label 时，向左时，label 的父 div 的宽变小，label 的父 div 相邻的 右边的 div 宽度变大。\n\n# 2.3 竖向布局\n\n```\n<div class='hj-wrap verticals'>\n        <div class=\"hj-vertical-split-div\">上\n            <label class=\"hj-vertical-split-label\"></label>\n        </div>\n        <div class=\"hj-vertical-split-div\">中\n            <label class=\"hj-vertical-split-label\"></label>\n        </div>\n        <div class=\"hj-vertical-split-div\">下</div>\n        <div class=\"arrow\"></div>\n    </div>\n```\n \n- 每一个横向的 div 为 hj-vertical-split-div 并相对定位，里面有一个拖动改变左右的 label 为 hj-vertical-split-label ，不能占有位置，所以要绝对定位，并定位到最下边并宽为 100%，最后一个竖向的 div 不用再放 hj-vertical-split-label 的 label 。\n- 拖动改变上下的 label 时，向上时，label 的父 div 的高度变小，label 的父 div 相邻的下边的 div 高度变大。\n\n# 3. js 实现\n\n代码：\n\n```\n/**\n * name:   split.js\n * author:  biaochen\n * date:    2018-12-26\n *\n */\n$(function() {\n    //鼠标横向、竖向、和改变父高度的上下 操作对象\n    var thisTransverseObject, thisVerticalObject, thisArrowObject;\n    //文档对象\n    var doc = document;\n    //横向分割栏\n    var transverseLabels = $(\".hj-wrap\").find(\".hj-transverse-split-label\");\n    //竖向分割栏\n    var verticalLabels = $(\".hj-wrap\").find(\".hj-vertical-split-label\");\n    // 改变父高度的 箭头 div\n    var parentArrow = $(\".hj-wrap\").find(\".arrow\");\n\n    // 设置宽\n    function setWidth(type) {\n        if (type === \"init\") {\n            var length = $(\".hj-wrap\").length;\n            if (length > 0) {\n                for (var i = 0; i < length; i++) {\n                    var width = $($(\".hj-wrap\")[i])[0].offsetWidth;\n                    var hjDivNums = $($(\".hj-wrap\")[i]).children(\".hj-transverse-split-div\");\n                    // var defaultWidth = Math.floor(100 / hjDivNums.length);\n                    var defaultWidth = Math.floor(width / hjDivNums.length);\n                    $($(\".hj-wrap\")[i])\n                        .children(\".hj-transverse-split-div\")\n                        .width(defaultWidth + \"px\");\n                    // .width(defaultWidth + \"%\");\n                }\n            }\n        } else {\n            // 设置百分比\n            var transverseDivs = $(\".hj-transverse-split-div\")\n            var widthLength = transverseDivs.length\n            for (var i = 0; i < widthLength; i++) {\n                var width = $(transverseDivs[i]).width();\n                var parentWidth = $(transverseDivs[i])\n                    .parent()\n                    .width();\n                var rate = (width / parentWidth) * 100 + \"%\";\n                $(transverseDivs[i]).css({ width: rate });\n            }\n        }\n    }\n\n    // 设置高\n    function setHeight(type) {\n        if (type === \"init\") {\n            var verticalsParentDivs = $(\".verticals\");\n            var parentLengths = verticalsParentDivs.length;\n            for (var i = 0; i < parentLengths; i++) {\n                var parentHeight = $(verticalsParentDivs[i]).height();\n                var childrenNum = $(verticalsParentDivs[i]).children(\n                    \".hj-vertical-split-div\"\n                ).length;\n                var defaultHeight = Math.floor(parentHeight / childrenNum);\n                // var rate = Math.floor((height / parentHeight)* 100)  + '%'\n                var defaultHeight = Math.floor(100 / childrenNum);\n                $(verticalsParentDivs[i])\n                    .children(\".hj-vertical-split-div\")\n                    .height(defaultHeight + \"%\");\n                // .height(defaultHeight + \"px\");\n            }\n        } else {\n            // 设置百分比\n            var verticalsDivs = $(\".hj-vertical-split-div\");\n            var heightLength = verticalsDivs.length;\n            for (var i = 0; i < heightLength; i++) {\n                var height = $(verticalsDivs[i]).height();\n                var parentHeight = $(verticalsDivs[i])\n                    .parent()\n                    .height();\n                var rate = (height / parentHeight) * 100 + \"%\";\n                $(verticalsDivs[i]).css({ height: rate });\n            }\n        }\n    }\n\n    setWidth('init')\n    setHeight(\"init\");\n\n    //定义一个对象\n    function PointerObject() {\n        this.el = null; //当前鼠标选择的对象\n        this.clickX = 0; //鼠标横向初始位置\n        this.clickY = 0; //鼠标竖向初始位置\n        this.transverseDragging = false; //判断鼠标可否横向拖动\n        this.verticalDragging = false; //判断鼠标可否竖向拖动\n    }\n    //横向分隔栏绑定事件\n    transverseLabels.bind(\"mousedown\", function(e) {\n        thisTransverseObject = new PointerObject();\n        thisTransverseObject.transverseDragging = true; //鼠标可横向拖动\n        thisTransverseObject.el = this;\n        thisTransverseObject.clickX = e.pageX; //记录鼠标横向初始位置\n    });\n\n    //竖向分隔栏绑定事件\n    verticalLabels.bind(\"mousedown\", function(e) {\n        //console.log(\"mousedown\");\n        thisVerticalObject = new PointerObject();\n        thisVerticalObject.verticalDragging = true; //鼠标可竖向拖动\n        thisVerticalObject.el = this;\n        thisVerticalObject.clickY = e.pageY; //记录鼠标竖向初始位置\n    });\n    //上下绑定事件\n    parentArrow.bind(\"mousedown\", function(e) {\n        //console.log(\"mousedown\");\n        thisArrowObject = new PointerObject();\n        // thisArrowObject.transverseDragging = true; //鼠标可横向拖动\n        thisArrowObject.verticalDragging = true; //鼠标可竖向拖动\n        thisArrowObject.el = this;\n        thisArrowObject.clickY = e.pageY; //记录鼠标竖向初始位置\n    });\n\n    doc.onmousemove = function(e) {\n        //鼠标横向拖动\n        if (thisTransverseObject != null) {\n            if (thisTransverseObject.transverseDragging) {\n                var changeDistance = 0;\n                if (thisTransverseObject.clickX >= e.pageX) {\n                    //鼠标向左移动\n                    changeDistance =\n                        Number(thisTransverseObject.clickX) - Number(e.pageX);\n                    if (\n                        $(thisTransverseObject.el)\n                        .parent()\n                        .width() -\n                        changeDistance <\n                        20\n                    ) {} else {\n                        $(thisTransverseObject.el)\n                            .parent()\n                            .width(\n                                $(thisTransverseObject.el)\n                                .parent()\n                                .width() - changeDistance\n                            );\n                        $(thisTransverseObject.el)\n                            .parent()\n                            .next()\n                            .width(\n                                $(thisTransverseObject.el)\n                                .parent()\n                                .next()\n                                .width() + changeDistance\n                            );\n                        thisTransverseObject.clickX = e.pageX;\n                        $(thisTransverseObject.el).offset({ left: e.pageX });\n                    }\n                } else {\n                    //鼠标向右移动\n                    changeDistance =\n                        Number(e.pageX) - Number(thisTransverseObject.clickX);\n                    if (\n                        $(thisTransverseObject.el)\n                        .parent()\n                        .next()\n                        .width() -\n                        changeDistance <\n                        20\n                    ) {} else {\n                        $(thisTransverseObject.el)\n                            .parent()\n                            .width(\n                                $(thisTransverseObject.el)\n                                .parent()\n                                .width() + changeDistance\n                            );\n                        $(thisTransverseObject.el)\n                            .parent()\n                            .next()\n                            .width(\n                                $(thisTransverseObject.el)\n                                .parent()\n                                .next()\n                                .width() - changeDistance\n                            );\n                        thisTransverseObject.clickX = e.pageX;\n                        $(thisTransverseObject.el).offset({ left: e.pageX });\n                    }\n                }\n                $(thisTransverseObject.el).width(2);\n            }\n        }\n        //鼠标竖向拖动\n        if (thisVerticalObject != null) {\n            if (thisVerticalObject.verticalDragging) {\n                var changeDistance = 0;\n                if (thisVerticalObject.clickY >= e.pageY) {\n                    //鼠标向上移动\n                    changeDistance = Number(thisVerticalObject.clickY) - Number(e.pageY);\n                    if (\n                        $(thisVerticalObject.el)\n                        .parent()\n                        .height() -\n                        changeDistance <\n                        20\n                    ) {} else {\n                        $(thisVerticalObject.el)\n                            .parent()\n                            .height(\n                                $(thisVerticalObject.el)\n                                .parent()\n                                .height() - changeDistance\n                            );\n                        $(thisVerticalObject.el)\n                            .parent()\n                            .next()\n                            .height(\n                                $(thisVerticalObject.el)\n                                .parent()\n                                .next()\n                                .height() + changeDistance\n                            );\n                        thisVerticalObject.clickY = e.pageY;\n                        $(thisVerticalObject.el).offset({ top: e.pageY });\n                    }\n                } else {\n                    //鼠标向下移动\n                    changeDistance = Number(e.pageY) - Number(thisVerticalObject.clickY);\n                    if (\n                        $(thisVerticalObject.el)\n                        .parent()\n                        .next()\n                        .height() -\n                        changeDistance <\n                        20\n                    ) {} else {\n                        $(thisVerticalObject.el)\n                            .parent()\n                            .height(\n                                $(thisVerticalObject.el)\n                                .parent()\n                                .height() + changeDistance\n                            );\n                        $(thisVerticalObject.el)\n                            .parent()\n                            .next()\n                            .height(\n                                $(thisVerticalObject.el)\n                                .parent()\n                                .next()\n                                .height() - changeDistance\n                            );\n                        thisVerticalObject.clickY = e.pageY;\n                        $(thisVerticalObject.el).offset({ top: e.pageY });\n                    }\n                }\n                $(thisVerticalObject.el).height(2);\n            }\n        }\n        // 改变父的 高度\n        if (thisArrowObject != null) {\n            //鼠标竖向拖动\n            if (thisArrowObject.verticalDragging) {\n                var changeDistance = 0;\n                if (thisArrowObject.clickY >= e.pageY) {\n                    //鼠标向上移动\n                    changeDistance = Number(thisArrowObject.clickY) - Number(e.pageY);\n                    if (\n                        $(thisArrowObject.el)\n                        .parent()\n                        .height() -\n                        changeDistance <\n                        50\n                    ) {} else {\n                        $(thisArrowObject.el)\n                            .parent()\n                            .height(\n                                $(thisArrowObject.el)\n                                .parent()\n                                .height() - changeDistance\n                            );\n                        thisArrowObject.clickY = e.pageY;\n                        $(thisArrowObject.el).offset({ bottom: e.pageY });\n                    }\n                } else {\n                    //鼠标向下移动\n                    changeDistance = Number(e.pageY) - Number(thisArrowObject.clickY);\n                    $(thisArrowObject.el)\n                        .parent()\n                        .height(\n                            $(thisArrowObject.el)\n                            .parent()\n                            .height() + changeDistance\n                        );\n                    thisArrowObject.clickY = e.pageY;\n                    $(thisArrowObject.el).offset({ bottom: e.pageY });\n                }\n                $(thisArrowObject.el).height(10);\n            }\n        }\n    };\n\n    $(doc).mouseup(function(e) {\n        setHeight(\"setHeight\");\n        setWidth(\"setWidth\");\n        // 鼠标弹起时设置不能拖动\n        if (thisTransverseObject != null) {\n            thisTransverseObject.transverseDragging = false;\n            thisTransverseObject = null;\n        }\n        if (thisVerticalObject != null) {\n            thisVerticalObject.verticalDragging = false;\n            thisVerticalObject = null;\n        }\n        if (thisArrowObject != null) {\n            thisArrowObject.verticalDragging = false;\n            thisArrowObject = null;\n        }\n\n        e.cancelBubble = true;\n    });\n});\n```\n\n# 4. 完整代码与效果\n\n效果图：\n\n![split.gif](https://upload-images.jianshu.io/upload_images/12890819-6a8ad52065c229c4.gif?imageMogr2/auto-orient/strip)\n\n项目地址：[https://github.com/biaochenxuying/split](https://github.com/biaochenxuying/split)\n效果体验地址：[ https://biaochenxuying.github.io/split/index.html](https://biaochenxuying.github.io/split/index.html)\n\n初始代码是从网上来的，不过网上的并不完整，父 div 的高也不能改变，并且孩子的宽高并不是百分比的，布局也并不合理，所以修改成这样子。\n\n# 5. 最后 \n\n![](https://upload-images.jianshu.io/upload_images/12890819-f8665293cc8d0dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，随想随感，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "create_time": "2018-12-26T13:33:49.136Z",
  "update_time": "2018-12-26T13:33:49.136Z"
  },
  {
  "meta": {
  "views": 251,
  "likes": 1,
  "comments": 12
  },
  "keyword": [
  "前端工程师",
  "2018",
  "总结"
  ],
  "desc": "时间过得很快，2018 年已经接近尾声了。离开大学校园已经一年半，正式工作也一年半了。  2018 年，我的本命年，今年 24 岁，离 “而立之年” —— 30 岁， 又近了一步。今年对我而言，是人生的一个重要节点。今年是我觉得过得最快的一年，也是成长最多的一年。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-90a6157a42e33d80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013d2bc1e7805eb83db9d",
  "5bf01431bc1e7805eb83dba2"
  ],
  "comments": [
  "5c1c90c4b54f044b4f9de094",
  "5c1caf87b54f044b4f9de096",
  "5c235adfb54f044b4f9de09f",
  "5c3edde5b2e5dd7cbaabe246",
  "5c417534b2e5dd7cbaabe262",
  "5c4ee342b2e5dd7cbaabe272"
  ],
  "category": [
  "5bf4088f245730373274df56"
  ],
  "_id": "5c1a2acfb54f044b4f9de085",
  "title": "2018 年，我的本命年",
  "author": "biaochenxuying",
  "content": "![](https://upload-images.jianshu.io/upload_images/12890819-90a6157a42e33d80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 1. 前言\n\n时间过得很快，2018 年已经接近尾声了。离开大学校园已经一年半，正式工作也一年半了。\n\n2018 年，我的本命年，今年 24 岁，离 “而立之年” —— 30 岁， 又近了一步。今年对我而言，是人生的一个重要节点。今年是我觉得过得最快的一年，也是成长最多的一年。\n\n# 2. 技术\n\n作为一名代码搬运工，技术做为安身立命的本钱，今年技术上有了挺大的见长。\n\n技术上，前端和后端都接触到当前流行的技术栈，前端方面有： vue.js 、react.js ；后端方面有：python 3 、node、express、mongodb、mysql。\n\n但是这些应用层的知识都是次要的，学到的编程能力和编程思维才是最重要的，毕竟一门通，门门通。况且对于程序员来说，编程能力和编程思维占了 80%，其他 api 的运用只占了 20%。\n\n## 2.1 前端\n\n对于 vue 的相关技术栈，虽然之前也有在用，但今年是技术上达到熟练的一年，做过 公众号、pc 端管理后台、H 5 应用。经过几个的项目的锤炼，应用上应该达到了熟练程度，也学到了不少好用的技巧。\n\n而 react 相关技术栈 ，是今年后半年学的。**学而不用，等于没学。** 所以要实战一下才行，所以做了个博客网站的项目，也就是本人现在的个人网站，并把项目源码开源在 github 上。这个过程中，也学到了一些常用的、基本的 api ，对一般的 react 项目，也能自行搭建和开发了。\n\n今年还看完了一本书:【WebKit 技术内幕】。看的不是纸质版的，是 pdf 的电子版，对浏览器和 WebKit 也有了一丢丢深入的了解，随着时间的久远，忘得差不多了 😅。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-eddcdfc489bfc993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 2.2 后端\n\npython 3 和 mysql 是前半年学的，最初想着边做前端边能用 python 的，不过没找到相应的工作，最后还是做前端，现在很久没用，也忘得差不多了啦 😅。\n\n对于 node、express、mongodb 是今年后半年学的，主要是为了快速搭建博客网站后端的。虽然还有很多要优化的地方，特别是数据的查询方面，但是最终还是搭建出来了。过程中，发现 node 比 python 好学，毕竟是用的是 javaScript 语言。\n\n对于编程也有了一丢丢的理解。之前看到阮一峰老师的一篇文章内容，说得好有道理。他的原文是这样说的：\n\n>在此引用一个开发者对年轻程序员的告诫：在软件开发中，技术变化如此之快，你花费了大量时间学习技术和工具，一旦这些技术被取代，你的知识将变得毫无价值，因为它们大部分都是实施的细节。\n\n>我最近总是在想这段话，软件开发算不算是真正的知识 ？\n如果它是一种真正的知识，那么理论上，我们学到的东西大部分应该不会过时，就好像微积分不会过时一样。可是实际上，我们都知道，软件开发技能有时效性，十年前学习的编程知识，十年后几乎肯定不能用于生产。那样的话，软件开发就不能算真正的知识，只是一种实施的细节。\n\n>公司旁边有一家税务所，每天都有很多人排队交税。如果你是第一次来交税，肯定搞不清楚怎么交，交税是一门学问，必须有人教你，要带哪些证件，要填哪些表，去哪些窗口排队等等。\n\n>我现在认为，学习编程跟学习交税是一样的，都是学习实施的细节。一旦外部环境变了，原来的实施细节就没用了。 当代编程由于层层的抽象和封装，我们已经不必接触底层真正具有通用性的知识了。大部分时候，所谓编程就是在写某个抽象层的配置。比如，网页样式就是在写 CSS 配置，你很难说这到底是真正的知识，还是像《办税指南》那样的实施细节。\n\n>实施细节并不是知识，而是操作步骤。如果技术栈发生变更，实施细节就会毫无用处。但是，你又不能不学习它，不知道实施细节，就没法做出项目。我觉得，**程序员应该要警惕，不要落入实施细节的陷阱，不要把全部精力花在实施细节上面，然后以为自己学到了真正的知识。对待各种语言和工具，正确的态度应该是“进得去，出得来”，既要了解足够的细节，也要能够站在宏观的角度看待它，探寻底层到底是怎么实现的。**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-b94eb508c0ca9078.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 3. 工作\n\n今年 5 月份的时候，换了东家。\n\n在上一家东家那里学到了很多东西，毕竟是刚毕业后工作的第一年。上一家东家的两位前端老大和另外二位后端开发，无论是技术还是做事上，对我都产生了比较大的影响，感谢。上一家东家的工作氛围还是很好的，特别怀念的是每周五一次的运动啊。\n\n在现在的公司，也不错，也有不少学习的榜样，就少了活动与运动节目。\n\n我一直认为一个合格的程序员，正常的工作安排，应该都是在上班时间高效的做完的，下班了就准时下班的。所以很多时候，我都是下午 5 点半 准时下班的，毕竟回去之后，想做的事还有一堆呢。\n\n但是非正常的工作安排就不一定了，比如项目很紧。因为项目时间紧，今年试过那么几次加班修 bugger 到凌晨 3 点的，然后早上七点多起来继续的。还试过一次项目中的数据被同事误删了，要配合后端开发抢救的，抢救到接近凌晨 4 点，第二天早上 8 点多照常起来正常上班的。只能感叹一声：**修仙真棒，年轻真好！！！**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-4fc01f851bfbb7b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/12890819-cba645003f4b272d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 4. 运动\n\n**身体是一，金钱、地位、荣誉则是零，只有有了前面的一，后面的零才会有用；反之，则都是做了无用功。**\n\n这一年来，还是和往年一样，时不时会进行各种运动，运动的项目一般有：跑步，健身，羽毛球，骑行等。\n\n跑步的频率大概每月平均有 3 次吧，每次一般都是 5 公里；健身大概每周 2 次；羽毛球就得看有没有合适的时机了；而骑行呢，现在是只要天气许可，下班都是骑车回去，因为比搭公交车实在是快太多了，时间宝贵啊。不间断的运动也慢慢成为了一种习惯。正因为一直有不间断的运动，所以这一年来又没有感冒过，身体还算健康。\n\n![图一](https://upload-images.jianshu.io/upload_images/12890819-8ca625f3d0f2d12f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 图一是 2018-07-17 到 2018-12-18 期间，所有运动的数据，以骑行为主。\n\n![图二](https://upload-images.jianshu.io/upload_images/12890819-ffb31080be020f0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 图二是 2017-03-20 到 2018-07-15 期间，所有运动的数据，以跑步为主。\n\n两图的总路程加起来，够回家两趟了 😇。\n\n这不间断的运动，也不算什么坚持，只是觉得应该做的，又刚好是喜欢做的事情而已。一直做着就成了习惯，**能做自己喜欢的事情是一件幸福的事情**。当然，现在正值冬季，户外运动的频率要相应减少好一点。\n\n运动带来的益处真的是没法估量，大学四年在校期间都没有生病过，只在大一寒假在家的时候，感冒了一次。近 5 年来，还有一次感冒是一年多前，刚毕业找工作的时候，被两同学轮流感冒传染，最终没能顶住。还有的益处就是保持着一个健康的身形，腹肌，胸肌都还在，只是这一年感觉肚皮比之前厚了一点了 😂。一天坐十几个小时，来程序员来说真的很伤。\n\n**当运动成为一种习惯，终将会是受益一生的事情。**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-702a40b1ceb336d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n# 5. 额外技能\n\n在 21 世纪， **写作、英语和编程** 估计是最有前途的技能。\n\n## 5.1 写作\n\n今年掌握的最有用的技能应该就是 **写作** 了，估计这个是受用一生的技能。\n\n今年 7 月份的时候，我的同学，外号：陈经理，开了个公众号 【 **一个优秀的废人** 】，并在上面写博客。他也叫我写，一直坚持会有很大的收获。之前一直都想写技术博客文章的，但是没写过，也没下定决心去做。7 月份的时候，我也下定决心开始写技术博客，并开了个公众号 【 **BiaoChenXuYing**  】，分享自己的技术与成长，目前粉丝有几百人。\n\n逐渐地，写作又成了一个爱好与习惯。**当一项技能变成爱好的时候，就能产生很巨大的能量**（就像很多人喜欢玩的王者农药）。自从写作以来，利用在学习上的时间比之前多了，学习知识的时候有了一定的深入，毕竟要写给别人看的，自己如果都不理解，别人又怎会能懂呢。\n\n这半年时间陆续写了 30 多篇文章，其中包含读书的笔记、随笔、技术文章，有写得不怎么样的，有写的挺好的，获得多人点赞的。虽然有时会参考一下别人的文章，但还是一直鼓励原创与坚持原创。大概只有作者才能懂原创的不易。\n\n写博客半年以来，也见到了不一样的风景。文章写的好，会有编辑找你出书；会有猎头顾问找上你，给你介绍大厂的好工作；会有好公司的团队负责人找你，想你加入他们的团队等等。这些都有遇到过，但自知现在能力还欠缺，还要不断积累与沉淀。写作是展现自己才华与能力很好的方式，当积累到一定的程度，好机会自会找上门来。\n\n如果 30 岁之后，不想写代码了或者写不动了，还能有一个额外技能可以谋生，且这个技能还是自己的一个兴趣来的，是多么快乐的一件事。\n\n**努力成为一个斜杠青年才是正途。**（斜杠青年：不仅指那些有着多重身份,多重收入的人。它代表的是一种全新的人生价值，核心在于多元化的人生。）\n\n**花一样的年纪，该奋斗的年纪不要安逸，实现梦想的同时顺便赚点钱，何乐而不为？**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-6714724fbc232e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## 5.2 做一顿好吃的\n\n今年后半年里，还尝试自己做饭、煲粥和煲汤。虽然这些都会，但是刚出来工作后的一年里，还没做过呢。不过都很少做饭做菜，因为实在是太耗费时间了啊，还要在旁边看着。大多都是煲粥煲汤，放好各种材料就可以了，接着就是：一边玩电脑，一边等着吃就可以了，非常方便啊。\n\n做一顿好吃的饭菜，也是一个必备的技能，毕竟 **自己动手，丰衣足食**。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-96140b8764922af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 5.3 理财\n\n理财 -- 人生必会技能。今年开始尝试用其他方式理财了，比如买股票，买基金，买活期产品等，虽然还一直在亏，但是都尝试一下，才知道这些东西好不好嘛。当然理财的水也很深，不是一朝一日就可学会的，需要长期研究才行。\n\n出来社会之后，对钱的理解越来越深刻了，长大后 99% 的烦恼是因为没钱。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-7acec8dd2d041a08.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/12890819-fb37610a6367f059.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 6. 娱乐\n\n今年大多数空闲的时间都是和电脑度过了。看电影，看电视剧，看动漫还有运动。今年看了很多动漫，热门的 3D 国漫都看过了，或者在追着看。国漫真的强势掘起了。\n\n今年是外出游玩最少的一年了，好像没有主动去过哪里游玩，仅有的几次都是身边的朋友叫去的。其实想去的地方真的还很多。只是还没有找到合适的那个人，和其一起去。\n\n祖国山河那么秀丽，还是得努力挣钱，去看一看。\n\n![](https://upload-images.jianshu.io/upload_images/12890819-1c06acc234d22cfe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n# 7. 期望 2019\n\n2018 年完成的事：\n\n- [x] 上手 react 技术栈\n- [x] 上手 node 技术栈\n- [x] 完成了自己的个人博客网站\n- [x] 在 github 上开源了博客网站的源码\n- [x] 把写作培养成了一种习惯\n- [x] 运营个人公众号 【 BiaoChenXuYing 】\n- [x] 不间断的运动，保持健康的体魄\n- [x] 看完了一本书【WebKit 技术内幕】\n- [x] 初尝其他理财方式\n- [x] 做一顿好吃的\n\n2019 的目标：\n\n- [ ] 把个人博客网站接入到公众号里面\n- [ ] 深入 vue 技术栈的原理与内在实现\n- [ ] 熟练 react 和 node 技术栈，可能还要学 java。\n- [ ] 学习算法与数据结构\n- [ ] 英语词汇量达到 7000 \n- [ ] 加大运动量，增重 5 斤\n- [ ] 坚持写作，运营好公众号\n- [ ] 多看书与文章（书到用时方恨少）\n- [ ] 逐渐深入其他理财方式\n- [ ] 培养其他技能\n\n**当一个目标需要很长远的时间来实现时，那就将每天要做的事培养成习惯，就会变得很容易了**（比如：英语）。\n\n现在正值冬天，天气冷，什么都不想干。最近在学英语，跟着水滴阅读看英语原著，总是想看就看，不想看就不看了，觉得每天的任务只是个任务，还没习惯。得把每天花 20 分钟看英语原著培养成习惯才行。\n\n>最终目标是 **尽早实现个人财富自由，做自己喜欢的事情。**\n\n我比较赞成的财务自由的解释是：**所谓的财务自由，指的是某人再也不用为了满足生活必需而出售自己的时间了。**\n\n不是生活所迫，谁特么想努力！目标还是要有的，不然和咸鱼有什么区别 ？虽然 **努力了不一定有结果，但是不努力一定很舒服。**\n\n> **没被生活折磨过只有两种可能，其一是有人替你扛了，其二是别着急，还没轮到你。**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-b80e851e00eb58b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 8. 总结\n\n致敬将要过去的 2018 ，期望 2019。\n\n**要么不努力，让生活选择你，随波逐流；要么自己选择生活，做自己喜欢的事。**\n\n**无论在哪里工作，无论做什么工作，握住能掌控的生活，遇见更好的自己，便是一件特别幸运又足够幸福的事。**\n\n**往后余生，愿你我都能，从前生活是工作，今后工作是生活。**\n\n**时光正好，未来还有无限可能，加油！**\n\n# 9. 最后\n\n![](https://upload-images.jianshu.io/upload_images/12890819-f8665293cc8d0dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，随想随感，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "create_time": "2018-12-19T11:26:07.989Z",
  "update_time": "2018-12-19T11:26:07.989Z"
  },
  {
  "meta": {
  "views": 90,
  "likes": 1,
  "comments": 0
  },
  "keyword": [
  "framework7",
  " 页面缓存",
  "路由变化总结"
  ],
  "desc": "framework7 页面缓存与路由变化总结",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-ed052611b82df1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013a6bc1e7805eb83db97"
  ],
  "comments": [],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5c17284ab54f044b4f9ddf12",
  "title": "framework7 页面缓存与路由变化总结",
  "author": "biaochenxuying",
  "content": "![programmer.png](https://upload-images.jianshu.io/upload_images/12890819-ed052611b82df1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# Framework7 Single View Starter App Template\n\nA simple single view Framework7 starter app template.\n\n# 1. Usage\n\n\n### 1. Download this repository\n```\ngit clone https://github.com/biaochenxuying/framework7-demo.git my-app\n```\n\nRepository will be downloaded into `my-app/` folder\n\n### 2. Instal dependencies\n\nGo to the downloaded repository folder and run:\n```\nnpm install\n```\n\nThis will download latest version of Framework7 (to `/www/framework7/`) and required icon fonts (to `/www/fonts/`)\n\n### 3. Run the app\n\n```\nnpm run serve\n```\n\nApp will be opened in browser at `http://localhost:8080/`\n\n## Use with cordova\n\nJust put the contents of `www` folder in your cordova's project root `www` folder\n\n## One command install\n\n```\ngit clone https://github.com/biaochenxuying/framework7-demo.git my-app &&\ncd my-app &&\nnpm install &&\nnpm run serve\n```\n\n> 配合本地服务( 如 nginx )可以访问不同的 indexX.html, 其中  http://192.168.0.134 是本地 ip\n```\nhttp://192.168.0.134/index.html\nhttp://192.168.0.134/index1.html\n```\n\n\n# 2. 开启页面缓存与路由变化 \n\n- stackPages 和 pushState。\n\n```\nvar app = new Framework7({\n    root: '#app', // App root element\n    view: {\n        stackPages: true, // 路由跳转，多级页面缓存\n        pushState: true, // 开启 url 根据路由 hash 变化\n    },\n});\n```\n\n# 3. 路由与多页面与可缓存总结\n\n| 选项 | 支持多 tab | tab 切换，缓存 | 页面跳转，缓存 | tab 切换，路由变 | 页面跳转，路由变 |\n|  :------ |  :------ |  :------ |  :------ |  :------ |  :------ |\n| 单 html 文件，例子 2 | —— | —— | —— | —— |  —— |\n| 单 html 文件加 tab，例子 5 | 支持 | 支持 | 支持 | 不支持 |  支持 |\n| 多 html 文件加路由，例子 1 | —— | —— | 支持 | —— |   支持 |\n| 多 html 文件加路由加多 tab（tabs-animated，Multiple Views Layout），例子 3 和 6 | 支持 | 支持 | 支持 | 不支持 |  支持 |\n| 多 html 文件加路由加多 tab（tabs-routable 方式），例子 4  | 支持 | 不支持 | 支持 | 不支持 |  支持 |\n\n\n> **注意：**tabs-routable 方式的，pushState: false，可以直接通过 http://192.168.0.134/index4.html 访问到默认的 tab 页面； 但是 pushState: true，url 地址要加个 ! 号，才能访问到默认的 tab 。 如：http://192.168.0.134/index4.html#!/ \n\n\n# 4. Live Preview\n",
  "create_time": "2018-12-17T04:38:34.653Z",
  "update_time": "2018-12-17T04:38:34.653Z"
  },
  {
  "meta": {
  "views": 1029,
  "likes": 12,
  "comments": 12
  },
  "keyword": [
  "如何将node+mongodb项目部署在服务器上",
  "性能优化"
  ],
  "desc": "本文讲解的是：做为前端开发人员，对服务器的了解还是小白的我，是如何一步步将 node+mongodb 项目部署在阿里云 centos 7.3 的服务器上，并进行性能优化，达到页面 1 秒内看到 loading ，3 秒内看到首屏内容的。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-22d0cb2d40e09612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013dcbc1e7805eb83db9e",
  "5bf013c2bc1e7805eb83db9b",
  "5bf013bbbc1e7805eb83db9a"
  ],
  "comments": [
  "5bfcfe23b54f044b4f9dccd9",
  "5c04c8c7b54f044b4f9ddca7",
  "5c10d498b54f044b4f9ddeeb",
  "5c10d51cb54f044b4f9ddeec"
  ],
  "category": [
  "5bf0150bbc1e7805eb83dbaa",
  "5bf014f9bc1e7805eb83dba9"
  ],
  "_id": "5bfa728bb54f044b4f9da240",
  "title": "服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的",
  "author": "biaochenxuying",
  "content": "![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-22d0cb2d40e09612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 前言\n\n本文讲解的是：做为前端开发人员，对服务器的了解还是小白的我，是如何一步步将 node+mongodb 项目部署在阿里云 centos 7.3 的服务器上，并进行性能优化，达到页面 1 秒内看到 loading ，3 秒内看到首屏内容的。\n\n搭建的项目是采用了主流的前后端分离思想的，这里只讲 **服务器环境搭建与性能优化。**\n\n效果请看 [http://biaochenxuying.cn/main.html](http://biaochenxuying.cn/main.html)\n\n# 1. 流程\n\n- 开发好前端与后端程序。\n- 购买服务器与域名\n- 服务器上安装所需环境（本项目是 node 和 mongodb ）\n- 服务器上开放端口与设置规则\n- 用 nginx、apache 或者tomcat 来提供HTTP服务或者设置代理\n- 上传项目代码 或者 用码云或者 gihub 来拉取你的代码到服务器上\n- 启动 express 服务器\n- 优化页面加载\n\n\n# 2. 内容细节\n\n## 2.1 开发好前端与后端程序\n\n开发好前端与后端程序，这个没什么好说的，就是开发！开发！开发！再开发！\n\n## 2.2 购买服务器与域名\n\n本人一直觉得程序员应该有一个自己的个人网站，拥有自己的域名与服务器。学知识或者测试项目的时候可以用来测试。\n\n阿里云有个专供学生的云翼计划  [阿里云学生套餐](https://promotion.aliyun.com/ntms/act/campus2018.html)，入门级的云服务器原价1400多，学生认证后只要114一年，非常划算。\n\n还是学生的，直接购买；不是学生了，有弟弟、妹妹的，可以用他们的大学生身份，购买，非常便宜实用（我购买的就是学生优惠套餐）。当然阿里云服务器在每年双 11 时都有很大优惠，也很便宜，选什么配置与价格得看自己的用处。\n\n服务器预装环境可以选择 CentOS 或者 windows server，，为了体验和学习 linux 系统，我选择了CentOS。\n\n![学生优惠套餐](https://upload-images.jianshu.io/upload_images/12890819-97f2516c305d9168.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n再次是购买域名 [阿里域名购买](https://wanwang.aliyun.com/domain/yumingheji)，本人也是在阿里云购买的。域名是分 国际域名与国内域名的，国际域名是不用备案的，但是国内的域名是必须 ICP备案的 [阿里云ICP代备案管理系统](https://beian.aliyun.com/order/index.htm?spm=a3c00.7621333.a3c1z.1.2439nxagnxagjz)，不然不能用，如果是国内域名，如何备案域名，请自己上网查找教程。\n\n\n![域名](https://upload-images.jianshu.io/upload_images/12890819-5f83fe0dc8695b83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当然如果你的网站只用来自己用的话，可以不用买域名，因为可以通过服务器的公网 ip 来访问网站内容的。\n\n如果购买了域名了，还要设置域名映射到相应的公网 ip ，不然也不能用。\n\n![域名解析](https://upload-images.jianshu.io/upload_images/12890819-759b6269857622d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n## 3. 服务器上安装所需环境（本项目是 node 和 mongodb ）\n\n#### 3.1 登录服务器\n\n因本人用的是 MacBook Pro ，所以直接打开 mac 终端，通过下面的命令行连接到服务器。root 是阿里云服务器默认的账号名，连接时候会叫你输入密码，输入你购买时设置的或者后来设置的密码。\n\n```\nssh root@47.106.20.666   //你的服务器公网 ip，比如 47.106.20.666\n```\n如图：\n\n![登录成功效果](https://upload-images.jianshu.io/upload_images/12890819-f4d264504e6fa956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> window 系统的，请用 Putty 或 Xshell 来登录，可以参考一下这篇文章  [把 Node.js 项目部署到阿里云服务器（CentOs）](https://segmentfault.com/a/1190000004051670)\n\n一般在新服务器创建后，建议先升级一下 CentOS：\n\n```\nyum -y update\n```\n\n常用的 Linux 命令\n\n```\ncd 进入目录\ncd .. 返回上一个目录\nls -a 查看当前目录\nmkdir abc 创建abc文件夹\nmv 移动或重命名\nrm 删除一个文件或者目录\n```\n\n#### 3.2  安装 node\n\n升级常用库文件, 安装 node.js 需要通过 g++ 进行编译。\n\n```\nyum -y install gcc gcc-c++ autoconf\n```\n\n跳转到目录：/usr/local/src，这个文件夹通常用来存放软件源代码：\n\n```\ncd /usr/local/src\n```\n\n下载 node.js 源码，也可以使用 scp 命令直接上传，因为下载实在太慢了：\n下载地址：[Downloads](https://nodejs.org/en/download/)，请下载最新的相应版本的源码进行下载，本人下载了 v10.13.0 版本的。\n\n![下载 node.js 源码](https://upload-images.jianshu.io/upload_images/12890819-5ec3f42765ca14d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\nhttps://nodejs.org/dist/v10.13.0/node-v10.13.0.tar.gz\n```\n\n下载完成后解压：\n\n```\ntar -xzvf node-v10.13.0.tar.gz\n```\n\n进入解压后的文件夹：\n\n```\ncd node-v10.13.0\n```\n\n执行配置脚本来进行预编译处理：\n\n```\n./configure\n```\n\n编译源代码，这个步骤花的时间会很长，大概需要 5 到 10 分钟：\n\n```\nmake\n```\n\n编译完成后，执行安装命令，使之在系统范围内可用：\n\n```\nmake install\n```\n\n安装 express 推荐 global 安装\n\n```\nnpm -g install express\n```\n\n建立超级链接, 不然 sudo node 时会报 \"command not found\"\n\n```\nsudo ln -s /usr/local/bin/node /usr/bin/node\nsudo ln -s /usr/local/lib/node /usr/lib/node\nsudo ln -s /usr/local/bin/npm /usr/bin/npm\nsudo ln -s /usr/local/bin/node-waf /usr/bin/node-waf\n```\n\n通过指令查看 node 及 npm 版本：\n\n```\nnode -v\n```\n\n```\nnpm -v\n```\n\nnode.js 到这里就基本安装完成了。\n\n#### 3.2  安装 mongodb\n\n下载地址：[mongodb](https://www.mongodb.com/download-center/community)\n下载时，请选对相应的环境与版本，因为本人的服务器是 CentOS ，其实本质就是 linux 系统，所以选择了如下图环境与目前最新的版本。\n\n![mongodb](https://upload-images.jianshu.io/upload_images/12890819-1545bc193d39194b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nmongodb : \n\n```\n软件安装位置：/usr/local/mongodb\n数据存放位置：/home/mongodb/data\n数据备份位置：/home/mongodb/bak\n日志存放位置：/home/mongodb/logs\n```\n\n下载安装包\n```\n> cd /usr/local\n> wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz\n```\n\n解压安装包，重命名文件夹为 mongodb\n\n```\ntar zxvf mongodb-linux-x86_64-4.0.4.tgz\nmv mongodb-linux-x86_64-4.0.4 mongodb\n```\n\n在 var 文件夹里建立 mongodb 文件夹，并分别建立文件夹 data 用于存放数据，logs 用于存放日志\n\n```\nmkdir /var/mongodb\nmkdir /var/mongodb/data\nmkdir /var/mongodb/logs\n```\n\n打开 rc.local 文件，添加 CentOS 开机启动项：\n\n```\nvim /etc/rc.d/rc.local\n// 不懂 vim 操作的请自行查看相应的文档教程，比如： vim 模式下，要 按了 i 才能插入内容，输入完之后，要按 shift 加 :wq 才能保存退出。\n```\n\n将 mongodb 启动命令追加到本文件中，让 mongodb 开机自启动：\n\n```\n/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork\n```\n\n启动 mongodb\n\n```\n/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork\n```\n\n看到如下信息说明已经安装完成并成功启动:\n\n```\nforked process: 18394\nall output going to: /var/mongodb/logs/log.log\n```\nmongodb 默认的端口号是 27017。\n\n如果你数据库的连接要账号和密码的，要创建数据库管理员，不然直接连接即可。\n在 mongo shell 中创建管理员及数据库。\n\n切换到 admin 数据库，创建超级管理员帐号\n\n```\nuse admin\ndb.createUser({ user: \"用户名\", pwd:\"登陆密码\", roles:[{ role: \"userAdminAnyDatabase\", db: \"admin\" }] })\n```\n\n切换到要使用的数据库，如 taodb 数据库，创建这个数据库的管理员帐号\n```\nuse taodb\n```\n```\ndb.createUser({ user: \"用户名\", pwd:\"登陆密码\", roles:[ { role: \"readWrite\", db: \"taodb\" }] //读写权限 })\n```\n重复按两下 control+c ，退出 mongo shell。\n到这里 mongodb 基本已经安装设置完成了。\n\n\n备份与恢复 请看这篇文章：[MongoDB 备份(mongodump)与恢复(mongorestore)](http://www.runoob.com/mongodb/mongodb-mongodump-mongorestore.html)\n安装 node 与 mongodb 也可以参考这篇文章：[CentOs搭建NodeJs服务器—Mongodb安装](https://www.jianshu.com/p/5a104184e010)\n\n\n## 3.3 服务器上开放端口与设置安全组规则\n\n> 如果你只放静态的网页，可以参考这个篇文章 [通过云虚拟主机控制台设置默认首页](https://help.aliyun.com/knowledge_detail/36154.html)\n\n但是我们是要部署后台程序的，所以要看以下的内容：\n\n**安全组规则是什么鬼**\n\n> 授权安全组规则可以允许或者禁止与安全组相关联的 ECS 实例的公网和内网的入方向和出方向的访问。 \n> [阿里云安全组应用案例文档](https://help.aliyun.com/document_detail/25475.html)\n\n> 80 端口是为 HTTP(HyperText Transport Protocol) 即超文本传输协议开放的,浏览器 HTTP 访问 IP 或域名的 80 端口时,可以省略 80 端口号\n\n如果我们没有开放相应的端口，\n\n比如我们的服务要用到 3000 ，就要开放 3000 的端口，不然是访问不了的；其他端口同理。\n\n![配置安全组规则 1](https://upload-images.jianshu.io/upload_images/12890819-94af47ba08cb3959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![配置安全组规则 2](https://upload-images.jianshu.io/upload_images/12890819-6f2f85dacf0e1cc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![配置安全组规则 3](https://upload-images.jianshu.io/upload_images/12890819-bc43b00a24ba2d3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n端口都配置对了，以为能用公网 IP 进行访问了么 ?  **小兄弟你太天真了 ...**\n![ 太天真了 ](https://upload-images.jianshu.io/upload_images/12890819-2b38d438f4861377.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n还有 **防火墙** 这一关呢，如果防火墙没有关闭或者相关的端口没有开放，也是不能用公网 IP 进行访问网站内容的。\n\n和安全组端口同理，比如我们的服务要用到的是 3000 端口，就要开放 3000 的端口，不然是访问不了的；其他端口同理。\n\n出于安全考虑还是把防火墙开上，只开放相应的端口最好。\n\n**怎么开放相应的端口 ？** 看下面两篇文章足矣，这里就不展开了。\n\n> [1. 将nodejs项目部署到阿里云ESC服务器,linux系统配置80端口,实现公网IP访问](https://blog.csdn.net/putao2062/article/details/79688020)\n\n> [2. centos出现“FirewallD is not running”怎么办](https://www.cnblogs.com/kccdzz/p/8110143.html)\n\n\n\n## 3.4 用 nginx、apache 或者 tomcat 来提供 HTTP 服务或者设置代理\n\n我是用了 nginx 的，所以这里只介绍 nginx 。\n安装 nginx 请看这两篇文章：\n\n> [1. Centos7安装Nginx实战](https://cloud.tencent.com/developer/news/119838)\n\n> [2. 阿里云Centos7安装Nginx服务器实现反向代理](https://blog.csdn.net/qq_21508727/article/details/80071174)\n\n**开启 ngnx 代理**\n\n- 进入到目录位置\n\n```\ncd /usr/local/nginx\n```\n\n- 在 nginx 目录下有一个 sbin 目录，sbin 目录下有一个 nginx 可执行程序。\n\n```\n./nginx\n```\n\n- 关闭 nginx\n\n```\n./nginx -s stop\n```\n\n- 重启\n\n```\n./nginx -s reload\n```\n基本的使用就是这样子了。\n\n**如下给出我的 nginx 代理的设置：**\n\n我的两个项目是放在 /home/blog/blog-react/build/; 和  /home/blog/blog-react-admin/dist/; 下的，如果你们的路径不是这个，请修改成你们的路径。\n\n```\n#user  nobody;\nworker_processes  1;\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n#pid        logs/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    # 如果port_in_redirect为off时，那么始终按照默认的80端口；如果该指令打开，那么将会返回当前正在监听的端口。\n    port_in_redirect off;\n\n    # 前台展示打开的服务代理\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n        #root /home/blog;\n\n        location  / {\n            root   /home/blog/blog-react/build/;\n            index  index.html;\n            try_files $uri $uri/ @router;\n            autoindex on;\n        }\n\n        location @router{\n            rewrite ^.*$ /index.html last;\n        }\n\n        location /api/ {\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_pass http://47.106.136.114:3000/ ;\n        }\n        gzip on;\n\n        gzip_buffers 32 4k;\n\n        gzip_comp_level 6;\n\n        gzip_min_length 200;\n\n        gzip_types text/css text/xml application/javascript;\n\n        gzip_vary on;\n\n        #error_page  404              /404.html;\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n\n    # HTTPS server\n    # 管理后台打开的服务代理\n    server {\n        listen       4444;\n        server_name  localhost;\n        #   charset koi8-r;\n        #   ssl_certificate      cert.pem;\n        #   ssl_certificate_key  cert.key;\n\n        #   ssl_session_cache    shared:SSL:1m;\n        #    ssl_session_timeout  5m;\n\n        #    ssl_ciphers  HIGH:!aNULL:!MD5;\n        #    ssl_prefer_server_ciphers  on;\n\n        location / {\n            root   /home/blog/blog-react-admin/dist/;\n            index  index.html index.htm;\n            try_files $uri $uri/ @router;\n            autoindex on;\n        }\n        location @router{\n            rewrite ^.*$ /index.html last;\n        }\n\n        location /api/ {\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_pass http://47.106.136.114:3000/ ;\n        }\n        gzip on;\n\n        gzip_buffers 32 4k;\n\n        gzip_comp_level 6;\n\n        gzip_min_length 200;\n\n        gzip_types text/css text/xml application/javascript;\n\n        gzip_vary on;\n\n        error_page   500 502 503 504  /50x.html;\n    }\n}\n```\n我是开了两个代理的：前台展示打开的服务代理和管理后台打开的服务代理，这个项目是分开端口访问的。\n比如：我的公网 ip 是 47.106.20.666，那么可以通过 http://47.106.20.666 即可访问前台展示，http://47.106.20.666:4444 即可访问管理后台的登录界面。\n\n\n 至于为什么要写这样的配置:\n\n```\ntry_files $uri $uri/ @router;\n\nlocation @router{\n        rewrite ^.*$ /index.html last;\n    }\n```\n\n因为进入到文章详情时或者前端路由变化了，再刷新浏览器，发现浏览器出现 404 。刷新页面时访问的资源在服务端找不到，因为 react-router 设置的路径不是真实存在的路径。\n所以那样设置是为了可以刷新还可以打到对应的路径的。\n\n> 刷新出现 404 问题，可以看下这篇文章 [react,vue等部署单页面项目时,访问刷新出现404问题](https://www.jianshu.com/p/b4f004bb8b66)\n\n## 3.5 上传项目代码，或者用码云、 gihub 来拉取你的代码到服务器上\n\n我是创建了码云的账号来管理项目代码的，因为码云上可以创建免费的私有仓库，我在本地把码上传到 Gitee.com 上，再进入服务器用 git 把代码拉取下来就可以了，非常方便。\n\n具体请看：[码云（Gitee.com）帮助文档 V1.2](http://git.mydoc.io/?t=180676)\n\ngit 的安装请看： [CentOS 7.4 系统安装 git](https://www.cnblogs.com/hglibin/p/8627975.html)\n\n如果不想用 git 进行代码管理，请用其他可以连接服务器上传文件的软件，比如 FileZilla。 \n\n\n## 3.6 启动 express 服务\n\n启动 express 服务，我用了 pm2， 可以永久运行在服务器上，且不会一报错 express 服务就挂了，而且运行中还可以进行其他操作。\n\n安装：\n```\nnpm install -g pm2\n```\n\n切换当前工作目录到 express 应用文件夹下,执行 pm2 命令启动 express 服务：\n\n```\npm2 start ./bin/www\n```\n\n比如我操作项目时的基本操作：\n\n```\ncd /home/blog/blog-node\npm2 start ./bin/www // 开启\npm2 stop ./bin/www // 关闭\npm2 list //查看所用已启动项目：\n```\n\n## 3.7 页面加载优化\n\n再看刚刚的 nginx 的一些配置：\n\n```\nserver {\n        gzip on;\n        gzip_buffers 32 4k;\n        gzip_comp_level 6;\n        gzip_min_length 200;\n        gzip_types text/css text/xml application/javascript;\n        gzip_vary on;\n    }\n```\n\n这个就是利用 ngonx 开启 gzip，亲测开启之后,压缩了接近 2/3 的文件大小，本来要 1M 多的文件，开启压缩之后，变成了 300k 左右。\n\n还有其他的优化请看这篇文章 [React 16 加载性能优化指南](https://blog.csdn.net/xiaoguang44/article/details/80436952)，写的很不错，我的一些优化都是参考了这个篇文章的。\n\n做完一系列的优化处理之后，在网络正常的情况下，页面首屏渲染由本来是接近 5 秒，变成了 3 秒内，首屏渲染之前的 loading 在 1 秒内可见了。\n\n# 4. 项目地址\n\n**本人的个人博客项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n> [blog：https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n**本博客系统的系列文章：**\n\n- 1. [react + node + express + ant + mongodb 的简洁兼时尚的博客网站](http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b)\n- 2. [react + Ant Design + 支持 markdown 的 blog-react 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7)\n- 3. [基于 node + express + mongodb 的 blog-node 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d)\n- 4. [服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的](http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240)\n\n# 最后\n\n对 **全栈开发** 有兴趣的朋友，可以扫下方二维码，关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发 等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "create_time": "2018-11-25T09:59:39.242Z",
  "update_time": "2018-11-25T09:59:39.242Z"
  },
  {
  "meta": {
  "views": 612,
  "likes": 1,
  "comments": 3
  },
  "keyword": [
  "node",
  " express",
  "mongodb",
  " blog-node 项目文档说明"
  ],
  "desc": "blog-node 是采用了主流的前后端分离思想的，主里只讲 后端。  blog-node 项目是 node + express + mongodb 的进行开发的，项目已经开源，项目地址在 github 上。 ",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-3348be07c69aa2b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013dcbc1e7805eb83db9e",
  "5bf013c2bc1e7805eb83db9b",
  "5bf013bbbc1e7805eb83db9a"
  ],
  "comments": [
  "5bfb8ca2b54f044b4f9da247",
  "5c04a9f2b54f044b4f9ddca6",
  "5c04d0b4b54f044b4f9ddca9"
  ],
  "category": [
  "5bf014f9bc1e7805eb83dba9",
  "5bf0150bbc1e7805eb83dbaa"
  ],
  "_id": "5bf8c57185e0f13af26e7d0d",
  "title": "基于 node express mongodb 的 blog-node 项目文档说明",
  "author": "biaochenxuying",
  "content": "\n![项目结构图](https://upload-images.jianshu.io/upload_images/12890819-3348be07c69aa2b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 前言\n\nblog-node 是采用了主流的前后端分离思想的，主里只讲 后端。\n\nblog-node 项目是 node + express + mongodb 的进行开发的，项目已经开源，项目地址在 github 上。\n\n效果请看 [http://biaochenxuying.cn/main.html](http://biaochenxuying.cn/main.html)\n\n# 1. 后端\n\n## 1.1 已经实现功能\n\n- [x] 登录  \n- [x] 文章管理\n- [x] 标签管理 \n- [x] 评论  \n- [x] 留言管理\n- [x] 用户管理\n- [x] 友情链接管理\n- [x] 时间轴管理\n- [x] 身份验证\n\n## 1.2 待实现功能\n\n- [ ] 点赞、留言和评论 的通知管理\n- [ ] 个人中心（用来设置博主的各种信息）\n- [ ] 工作台（ 接入百度统计接口，查看网站浏览量和用户访问等数据 ）\n\n# 2. 技术\n\n- node\n- cookie-parser : \"~1.4.3\"\n- crypto : \"^1.0.1\"\n- express: \"~4.16.0\"\n- express-session : \"^1.15.6\",\n- http-errors : \"~1.6.2\",\n- mongodb : \"^3.1.8\",\n- mongoose : \"^5.3.7\",\n- mongoose-auto-increment : \"^5.0.1\",\n- yargs : \"^12.0.2\"\n\n\n# 3. 主文件 app.js\n \n```\n// modules\nconst createError = require('http-errors');\nconst express = require('express');\nconst path = require('path');\nconst cookieParser = require('cookie-parser');\nconst logger = require('morgan');\nconst session = require('express-session');\n\n// import 等语法要用到 babel 支持\nrequire('babel-register');\n\nconst app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(cookieParser('blog_node_cookie'));\napp.use(\n\tsession({\n\t\tsecret: 'blog_node_cookie',\n\t\tname: 'session_id', //# 在浏览器中生成cookie的名称key，默认是connect.sid\n\t\tresave: true,\n\t\tsaveUninitialized: true,\n\t\tcookie: { maxAge: 60 * 1000 * 30, httpOnly: true }, //过期时间\n\t}),\n);\n\nconst mongodb = require('./core/mongodb');\n\n// data server\nmongodb.connect();\n\n//将路由文件引入\nconst route = require('./routes/index');\n\n//初始化所有路由\nroute(app);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n\tnext(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n\t// set locals, only providing error in development\n\tres.locals.message = err.message;\n\tres.locals.error = req.app.get('env') === 'development' ? err : {};\n\n\t// render the error page\n\tres.status(err.status || 500);\n\tres.render('error');\n});\n\nmodule.exports = app;\n```\n\n# 4. 数据库 core/mongodb.js\n\n```\n/**\n * Mongoose module.\n * @file 数据库模块\n * @module core/mongoose\n * @author  biaochenxuying <https://github.com/biaochenxuying>\n */\n\nconst consola = require('consola')\nconst CONFIG = require('../app.config.js')\nconst mongoose = require('mongoose')\nconst autoIncrement = require('mongoose-auto-increment')\n\n// remove DeprecationWarning\nmongoose.set('useFindAndModify', false)\n\n\n// mongoose Promise\nmongoose.Promise = global.Promise\n\n// mongoose\nexports.mongoose = mongoose\n\n// connect\nexports.connect = () => {\n\n\t// 连接数据库\n\tmongoose.connect(CONFIG.MONGODB.uri, {\n\t\tuseCreateIndex: true,\n\t\tuseNewUrlParser: true,\n\t\tpromiseLibrary: global.Promise\n\t})\n\n\t// 连接错误\n\tmongoose.connection.on('error', error => {\n\t\tconsola.warn('数据库连接失败!', error)\n\t})\n\n\t// 连接成功\n\tmongoose.connection.once('open', () => {\n\t\tconsola.ready('数据库连接成功!')\n\t})\n\n\t// 自增 ID 初始化\n\tautoIncrement.initialize(mongoose.connection)\n\t\n\t// 返回实例\n\treturn mongoose\n}\n\n```\n\n# 5. 数据模型 Model\n\n这里只介绍 用户、文章和评论 的模型。\n\n## 5.1 用户\n\n用户的字段都有设置类型 type，大多都设置了默认值 default ，邮箱设置了验证规则 validate，密码保存用了 crypto 来加密。\n\n用了中间件自增 ID 插件 mongoose-auto-increment。\n\n```\n/**\n * User model module.\n * @file 权限和用户数据模型\n * @module model/user\n * @author biaochenxuying <https://github.com/biaochenxuying>\n */\n\nconst crypto = require('crypto');\nconst { argv } = require('yargs');\nconst { mongoose } = require('../core/mongodb.js');\nconst autoIncrement = require('mongoose-auto-increment');\n\nconst adminSchema = new mongoose.Schema({\n\t// 名字\n\tname: { type: String, required: true, default: '' },\n\n\t// 用户类型 0：博主 1：其他用户\n\ttype: { type: Number, default: 1 },\n\n\t// 手机\n\tphone: { type: String, default: '' },\n\n\t//封面\n\timg_url: { type: String, default: '' },\n\n\t// 邮箱\n\temail: { type: String, required: true, validate: /\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}/ },\n\n\t// 个人介绍\n\tintroduce: { type: String, default: '' },\n\n\t// 头像\n\tavatar: { type: String, default: 'user' },\n\n\t// 密码\n\tpassword: {\n\t\ttype: String,\n\t\trequired: true,\n\t\tdefault: crypto\n\t\t\t.createHash('md5')\n\t\t\t.update(argv.auth_default_password || 'root')\n\t\t\t.digest('hex'),\n\t},\n\n\t// 创建日期\n\tcreate_time: { type: Date, default: Date.now },\n\n\t// 最后修改日期\n\tupdate_time: { type: Date, default: Date.now },\n});\n\n// 自增 ID 插件配置\nadminSchema.plugin(autoIncrement.plugin, {\n\tmodel: 'User',\n\tfield: 'id',\n\tstartAt: 1,\n\tincrementBy: 1,\n});\n\nmodule.exports = mongoose.model('User', adminSchema);\n\n```\n \n## 5.2 文章\n\n文章是分类型的：文章类型 => 1: 普通文章，2: 简历，3: 管理员介绍\n而且简历和管理员介绍的文章只能是各自一篇（因为前台展示那里有个导航 关于我 ，就是请求管理员介绍这篇文章的，简历也是打算这样子用的），普通文章可以是无数篇。\n\n点赞的用户 like_users 那里应该只保存用户 id 的，这个后面修改一下。\n\n```\n/**\n * Article model module.\n * @file 文章数据模型\n * @module model/article\n * @author biaochenxuying <https://github.com/biaochenxuying>\n */\n\nconst { mongoose } = require('../core/mongodb.js');\nconst autoIncrement = require('mongoose-auto-increment');\n\n// 文章模型\nconst articleSchema = new mongoose.Schema({\n\t// 文章标题\n\ttitle: { type: String, required: true, validate: /\\S+/ },\n\n\t// 文章关键字（SEO）\n\tkeyword: [{ type: String, default: '' }],\n\n\t// 作者\n\tauthor: { type: String, required: true, validate: /\\S+/ },\n\n\t// 文章描述\n\tdesc: { type: String, default: '' },\n\n\t// 文章内容\n\tcontent: { type: String, required: true, validate: /\\S+/ },\n\n\t// 字数\n\tnumbers: { type: String, default: 0 },\n\n\t// 封面图\n\timg_url: { type: String, default: 'https://upload-images.jianshu.io/upload_images/12890819-80fa7517ab3f2783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240' },\n\n\t// 文章类型 => 1: 普通文章，2: 简历，3: 管理员介绍\n\ttype: { type: Number, default: 1 },\n\n\t// 文章发布状态 => 0 草稿，1 已发布\n\tstate: { type: Number, default: 1 },\n\n\t// 文章转载状态 => 0 原创，1 转载，2 混合\n\torigin: { type: Number, default: 0 },\n\n\t// 文章标签\n\ttags: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Tag', required: true }],\n\n\tcomments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment', required: true }],\n\n\t// 文章分类\n\tcategory: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: true }],\n\n\t// 点赞的用户\n\tlike_users: [\n\t\t{\n\t\t\t// 用户id\n\t\t\tid: { type: mongoose.Schema.Types.ObjectId },\n\n\t\t\t// 名字\n\t\t\tname: { type: String, required: true, default: '' },\n\n\t\t\t// 用户类型 0：博主 1：其他用户\n\t\t\ttype: { type: Number, default: 1 },\n\n\t\t\t// 个人介绍\n\t\t\tintroduce: { type: String, default: '' },\n\n\t\t\t// 头像\n\t\t\tavatar: { type: String, default: 'user' },\n\n\t\t\t// 创建日期\n\t\t\tcreate_time: { type: Date, default: Date.now },\n\t\t},\n\t],\n\n\t// 其他元信息\n\tmeta: {\n\t\tviews: { type: Number, default: 0 },\n\t\tlikes: { type: Number, default: 0 },\n\t\tcomments: { type: Number, default: 0 },\n\t},\n\n\t// 创建日期\n\tcreate_time: { type: Date, default: Date.now },\n\n\t// 最后修改日期\n\tupdate_time: { type: Date, default: Date.now },\n});\n\n// 自增 ID 插件配置\narticleSchema.plugin(autoIncrement.plugin, {\n\tmodel: 'Article',\n\tfield: 'id',\n\tstartAt: 1,\n\tincrementBy: 1,\n});\n\n// 文章模型\nmodule.exports = mongoose.model('Article', articleSchema);\n\n```\n\n## 5.3 评论\n\n评论功能是实现了简单的三级评论的，第三者的评论（就是别人对一级评论进行再评论）放在 other_comments 里面。\n\n```\n/**\n * Comment model module.\n * @file 评论数据模型\n * @module model/comment\n * @author biaochenxuying <https://github.com/biaochenxuying>\n */\n\nconst { mongoose } = require('../core/mongodb.js');\nconst autoIncrement = require('mongoose-auto-increment');\n\n// 评论模型\nconst commentSchema = new mongoose.Schema({\n\t// 评论所在的文章 id\n\tarticle_id: { type: mongoose.Schema.Types.ObjectId, required: true },\n\n\t// content\n\tcontent: { type: String, required: true, validate: /\\S+/ },\n\n\t// 是否置顶\n\tis_top: { type: Boolean, default: false },\n\n\t// 被赞数\n\tlikes: { type: Number, default: 0 },\n\n\tuser_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n\n\t// 父评论的用户信息\n\tuser: {\n\t\t// 用户id\n\t\tuser_id: { type: mongoose.Schema.Types.ObjectId },\n\n\t\t// 名字\n\t\tname: { type: String, required: true, default: '' },\n\n\t\t// 用户类型 0：博主 1：其他用户\n\t\ttype: { type: Number, default: 1 },\n\n\t\t// 头像\n\t\tavatar: { type: String, default: 'user' },\n\t},\n\n\t// 第三者评论\n\tother_comments: [\n\t\t{\n\t\t\tuser: {\n\t\t\t\tid: { type: mongoose.Schema.Types.ObjectId },\n\n\t\t\t\t// 名字\n\t\t\t\tname: { type: String, required: true, default: '' },\n\n\t\t\t\t// 用户类型 0：博主 1：其他用户\n\t\t\t\ttype: { type: Number, default: 1 },\n\t\t\t},\n\n\t\t\t// content\n\t\t\tcontent: { type: String, required: true, validate: /\\S+/ },\n\n\t\t\t// 状态 => 0 待审核 / 1 通过正常 / -1 已删除 / -2 垃圾评论\n\t\t\tstate: { type: Number, default: 1 },\n\n\t\t\t// 创建日期\n\t\t\tcreate_time: { type: Date, default: Date.now },\n\t\t},\n\t],\n\n\t// 状态 => 0 待审核 / 1 通过正常 / -1 已删除 / -2 垃圾评论\n\tstate: { type: Number, default: 1 },\n\n\t// 创建日期\n\tcreate_time: { type: Date, default: Date.now },\n\n\t// 最后修改日期\n\tupdate_time: { type: Date, default: Date.now },\n});\n\n// 自增 ID 插件配置\ncommentSchema.plugin(autoIncrement.plugin, {\n\tmodel: 'Comment',\n\tfield: 'id',\n\tstartAt: 1,\n\tincrementBy: 1,\n});\n\n// 标签模型\nmodule.exports = mongoose.model('Comment', commentSchema);\n\n```\n\n其他模块的具体需求，都是些常用的逻辑可以实现的，也很简单，这里就不展开讲了。\n\n# 6. 路由接口 routes\n\n# 6.1 主文件\n\n```\n/*\n*所有的路由接口\n*/\nconst user = require('./user');\nconst article = require('./article');\nconst comment = require('./comment');\nconst message = require('./message');\nconst tag = require('./tag');\nconst link = require('./link');\nconst category = require('./category');\nconst timeAxis = require('./timeAxis');\n\nmodule.exports = app => {\n\tapp.post('/login', user.login);\n\tapp.post('/logout', user.logout);\n\tapp.post('/loginAdmin', user.loginAdmin);\n\tapp.post('/register', user.register);\n\tapp.post('/delUser', user.delUser);\n\tapp.get('/currentUser', user.currentUser);\n\tapp.get('/getUserList', user.getUserList);\n\n\tapp.post('/addComment', comment.addComment);\n\tapp.post('/addThirdComment', comment.addThirdComment);\n\tapp.post('/changeComment', comment.changeComment);\n\tapp.post('/changeThirdComment', comment.changeThirdComment);\n\tapp.get('/getCommentList', comment.getCommentList);\n\n\tapp.post('/addArticle', article.addArticle);\n\tapp.post('/updateArticle', article.updateArticle);\n\tapp.post('/delArticle', article.delArticle);\n\tapp.get('/getArticleList', article.getArticleList);\n\tapp.get('/getArticleListAdmin', article.getArticleListAdmin);\n\tapp.post('/getArticleDetail', article.getArticleDetail);\n\tapp.post('/likeArticle', article.likeArticle);\n\n\tapp.post('/addTag', tag.addTag);\n\tapp.post('/delTag', tag.delTag);\n\tapp.get('/getTagList', tag.getTagList);\n\n\tapp.post('/addMessage', message.addMessage);\n\tapp.post('/addReplyMessage', message.addReplyMessage);\n\tapp.post('/delMessage', message.delMessage);\n\tapp.post('/getMessageDetail', message.getMessageDetail);\n\tapp.get('/getMessageList', message.getMessageList);\n\n\tapp.post('/addLink', link.addLink);\n\tapp.post('/updateLink', link.updateLink);\n\tapp.post('/delLink', link.delLink);\n\tapp.get('/getLinkList', link.getLinkList);\n\n\tapp.post('/addCategory', category.addCategory);\n\tapp.post('/delCategory', category.delCategory);\n\tapp.get('/getCategoryList', category.getCategoryList);\n\n\tapp.post('/addTimeAxis', timeAxis.addTimeAxis);\n\tapp.post('/updateTimeAxis', timeAxis.updateTimeAxis);\n\tapp.post('/delTimeAxis', timeAxis.delTimeAxis);\n\tapp.get('/getTimeAxisList', timeAxis.getTimeAxisList);\n\tapp.post('/getTimeAxisDetail', timeAxis.getTimeAxisDetail);\n};\n```\n\n## 6.2 文章\n\n各模块的列表都是用了分页的形式的。\n\n```\nimport Article from '../models/article';\nimport User from '../models/user';\nimport { responseClient, timestampToTime } from '../util/util';\n\nexports.addArticle = (req, res) => {\n\t// if (!req.session.userInfo) {\n\t// \tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t// \treturn;\n\t// }\n\tconst { title, author, keyword, content, desc, img_url, tags, category, state, type, origin } = req.body;\n\tlet tempArticle = null\n\tif(img_url){\n\t\ttempArticle = new Article({\n\t\t\ttitle,\n\t\t\tauthor,\n\t\t\tkeyword: keyword ? keyword.split(',') : [],\n\t\t\tcontent,\n\t\t\tnumbers: content.length,\n\t\t\tdesc,\n\t\t\timg_url,\n\t\t\ttags: tags ? tags.split(',') : [],\n\t\t\tcategory: category ? category.split(',') : [],\n\t\t\tstate,\n\t\t\ttype,\n\t\t\torigin,\n\t\t});\n\t}else{\n\t\ttempArticle = new Article({\n\t\t\ttitle,\n\t\t\tauthor,\n\t\t\tkeyword: keyword ? keyword.split(',') : [],\n\t\t\tcontent,\n\t\t\tnumbers: content.length,\n\t\t\tdesc,\n\t\t\ttags: tags ? tags.split(',') : [],\n\t\t\tcategory: category ? category.split(',') : [],\n\t\t\tstate,\n\t\t\ttype,\n\t\t\torigin,\n\t\t});\n\t}\n\t\n\ttempArticle\n\t\t.save()\n\t\t.then(data => {\n\t\t\tresponseClient(res, 200, 0, '保存成功', data);\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\nexports.updateArticle = (req, res) => {\n\t// if (!req.session.userInfo) {\n\t// \tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t// \treturn;\n\t// }\n\tconst { title, author, keyword, content, desc, img_url, tags, category, state, type, origin, id } = req.body;\n\tArticle.update(\n\t\t{ _id: id },\n\t\t{\n\t\t\ttitle,\n\t\t\tauthor,\n\t\t\tkeyword: keyword ? keyword.split(','): [],\n\t\t\tcontent,\n\t\t\tdesc,\n\t\t\timg_url,\n\t\t\ttags: tags ? tags.split(',') : [],\n\t\t\tcategory:category ? category.split(',') : [],\n\t\t\tstate,\n\t\t\ttype,\n\t\t\torigin,\n\t\t},\n\t)\n\t\t.then(result => {\n\t\t\tresponseClient(res, 200, 0, '操作成功', result);\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.error(err);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\nexports.delArticle = (req, res) => {\n\tlet { id } = req.body;\n\tArticle.deleteMany({ _id: id })\n\t\t.then(result => {\n\t\t\tif (result.n === 1) {\n\t\t\t\tresponseClient(res, 200, 0, '删除成功!');\n\t\t\t} else {\n\t\t\t\tresponseClient(res, 200, 1, '文章不存在');\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.error('err :', err);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\n// 前台文章列表\nexports.getArticleList = (req, res) => {\n\tlet keyword = req.query.keyword || null;\n\tlet state = req.query.state || '';\n\tlet likes = req.query.likes || '';\n\tlet tag_id = req.query.tag_id || '';\n\tlet category_id = req.query.category_id || '';\n\tlet pageNum = parseInt(req.query.pageNum) || 1;\n\tlet pageSize = parseInt(req.query.pageSize) || 10;\n\tlet conditions = {};\n\tif (!state) {\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i'); //不区分大小写\n\t\t\tconditions = {\n\t\t\t\t$or: [{ title: { $regex: reg } }, { desc: { $regex: reg } }],\n\t\t\t};\n\t\t}\n\t} else if (state) {\n\t\tstate = parseInt(state);\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i');\n\t\t\tconditions = {\n\t\t\t\t$and: [\n\t\t\t\t\t{ $or: [{ state: state }] },\n\t\t\t\t\t{ $or: [{ title: { $regex: reg } }, { desc: { $regex: reg } }, { keyword: { $regex: reg } }] },\n\t\t\t\t],\n\t\t\t};\n\t\t} else {\n\t\t\tconditions = { state };\n\t\t}\n\t}\n\n\tlet skip = pageNum - 1 < 0 ? 0 : (pageNum - 1) * pageSize;\n\tlet responseData = {\n\t\tcount: 0,\n\t\tlist: [],\n\t};\n\tArticle.countDocuments(conditions, (err, count) => {\n\t\tif (err) {\n\t\t\tconsole.log('Error:' + err);\n\t\t} else {\n\t\t\tresponseData.count = count;\n\t\t\t// 待返回的字段\n\t\t\tlet fields = {\n\t\t\t\ttitle: 1,\n\t\t\t\tauthor: 1,\n\t\t\t\tkeyword: 1,\n\t\t\t\tcontent: 1,\n\t\t\t\tdesc: 1,\n\t\t\t\timg_url: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tcategory: 1,\n\t\t\t\tstate: 1,\n\t\t\t\ttype: 1,\n\t\t\t\torigin: 1,\n\t\t\t\tcomments: 1,\n\t\t\t\tlike_User_id: 1,\n\t\t\t\tmeta: 1,\n\t\t\t\tcreate_time: 1,\n\t\t\t\tupdate_time: 1,\n\t\t\t};\n\t\t\tlet options = {\n\t\t\t\tskip: skip,\n\t\t\t\tlimit: pageSize,\n\t\t\t\tsort: { create_time: -1 },\n\t\t\t};\n\t\t\tArticle.find(conditions, fields, options, (error, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error:' + error);\n\t\t\t\t\t// throw error;\n\t\t\t\t} else {\n\t\t\t\t\tlet newList = [];\n\t\t\t\t\tif (likes) {\n\t\t\t\t\t\t// 根据热度 likes 返回数据\n\t\t\t\t\t\tresult.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.meta.likes - a.meta.likes;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponseData.list = result;\n\t\t\t\t\t} else if (category_id) {\n\t\t\t\t\t\t// 根据 分类 id 返回数据\n\t\t\t\t\t\tresult.forEach(item => {\n\t\t\t\t\t\t\tif (item.category.indexOf(category_id) > -1) {\n\t\t\t\t\t\t\t\tnewList.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet len = newList.length;\n\t\t\t\t\t\tresponseData.count = len;\n\t\t\t\t\t\tresponseData.list = newList;\n\t\t\t\t\t} else if (tag_id) {\n\t\t\t\t\t\t// 根据标签 id 返回数据\n\t\t\t\t\t\tresult.forEach(item => {\n\t\t\t\t\t\t\tif (item.tags.indexOf(tag_id) > -1) {\n\t\t\t\t\t\t\t\tnewList.push(item);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet len = newList.length;\n\t\t\t\t\t\tresponseData.count = len;\n\t\t\t\t\t\tresponseData.list = newList;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseData.list = result;\n\t\t\t\t\t}\n\t\t\t\t\tresponseClient(res, 200, 0, '操作成功！', responseData);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\n// 后台文章列表\nexports.getArticleListAdmin = (req, res) => {\n\tlet keyword = req.query.keyword || null;\n\tlet state = req.query.state || '';\n\tlet likes = req.query.likes || '';\n\tlet pageNum = parseInt(req.query.pageNum) || 1;\n\tlet pageSize = parseInt(req.query.pageSize) || 10;\n\tlet conditions = {};\n\tif (!state) {\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i'); //不区分大小写\n\t\t\tconditions = {\n\t\t\t\t$or: [{ title: { $regex: reg } }, { desc: { $regex: reg } }],\n\t\t\t};\n\t\t}\n\t} else if (state) {\n\t\tstate = parseInt(state);\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i');\n\t\t\tconditions = {\n\t\t\t\t$and: [\n\t\t\t\t\t{ $or: [{ state: state }] },\n\t\t\t\t\t{ $or: [{ title: { $regex: reg } }, { desc: { $regex: reg } }, { keyword: { $regex: reg } }] },\n\t\t\t\t],\n\t\t\t};\n\t\t} else {\n\t\t\tconditions = { state };\n\t\t}\n\t}\n\n\tlet skip = pageNum - 1 < 0 ? 0 : (pageNum - 1) * pageSize;\n\tlet responseData = {\n\t\tcount: 0,\n\t\tlist: [],\n\t};\n\tArticle.countDocuments(conditions, (err, count) => {\n\t\tif (err) {\n\t\t\tconsole.log('Error:' + err);\n\t\t} else {\n\t\t\tresponseData.count = count;\n\t\t\t// 待返回的字段\n\t\t\tlet fields = {\n\t\t\t\ttitle: 1,\n\t\t\t\tauthor: 1,\n\t\t\t\tkeyword: 1,\n\t\t\t\tcontent: 1,\n\t\t\t\tdesc: 1,\n\t\t\t\timg_url: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tcategory: 1,\n\t\t\t\tstate: 1,\n\t\t\t\ttype: 1,\n\t\t\t\torigin: 1,\n\t\t\t\tcomments: 1,\n\t\t\t\tlike_User_id: 1,\n\t\t\t\tmeta: 1,\n\t\t\t\tcreate_time: 1,\n\t\t\t\tupdate_time: 1,\n\t\t\t};\n\t\t\tlet options = {\n\t\t\t\tskip: skip,\n\t\t\t\tlimit: pageSize,\n\t\t\t\tsort: { create_time: -1 },\n\t\t\t};\n\t\t\tArticle.find(conditions, fields, options, (error, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error:' + error);\n\t\t\t\t\t// throw error;\n\t\t\t\t} else {\n\t\t\t\t\tif (likes) {\n\t\t\t\t\t\tresult.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.meta.likes - a.meta.likes;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tresponseData.list = result;\n\t\t\t\t\tresponseClient(res, 200, 0, '操作成功！', responseData);\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.populate([\n\t\t\t\t\t{ path: 'tags', },\n\t\t\t\t\t{ path: 'comments',  },\n\t\t\t\t\t{ path: 'category',  },\n\t\t\t\t])\n\t\t\t\t.exec((err, doc) => {});\n\t\t}\n\t});\n};\n\n// 文章点赞\nexports.likeArticle = (req, res) => {\n\tif (!req.session.userInfo) {\n\t\tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t\treturn;\n\t}\n\tlet { id, user_id } = req.body;\n\tArticle.findOne({ _id: id })\n\t\t.then(data => {\n\t\t\tlet fields = {};\n\t\t\tdata.meta.likes = data.meta.likes + 1;\n\t\t\tfields.meta = data.meta;\n\t\t\tlet like_users_arr = data.like_users.length ? data.like_users : [];\n\t\t\tUser.findOne({ _id: user_id })\n\t\t\t\t.then(user => {\n\t\t\t\t\tlet new_like_user = {};\n\t\t\t\t\tnew_like_user.id = user._id;\n\t\t\t\t\tnew_like_user.name = user.name;\n\t\t\t\t\tnew_like_user.avatar = user.avatar;\n\t\t\t\t\tnew_like_user.create_time = user.create_time;\n\t\t\t\t\tnew_like_user.type = user.type;\n\t\t\t\t\tnew_like_user.introduce = user.introduce;\n\t\t\t\t\tlike_users_arr.push(new_like_user);\n\t\t\t\t\tfields.like_users = like_users_arr;\n\t\t\t\t\tArticle.update({ _id: id }, fields)\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功！', result);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tconsole.error('err :', err);\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tresponseClient(res);\n\t\t\t\t\tconsole.error('err 1:', err);\n\t\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tresponseClient(res);\n\t\t\tconsole.error('err 2:', err);\n\t\t});\n};\n\n// 文章详情\nexports.getArticleDetailByType = (req, res) => {\n\tlet { type } = req.body;\n\tif (!type) {\n\t\tresponseClient(res, 200, 1, '文章不存在 ！');\n\t\treturn;\n\t}\n\tArticle.findOne({ type: type }, (Error, data) => {\n\t\tif (Error) {\n\t\t\tconsole.error('Error:' + Error);\n\t\t\t// throw error;\n\t\t} else {\n\t\t\tdata.meta.views = data.meta.views + 1;\n\t\t\tArticle.updateOne({ type: type }, { meta: data.meta })\n\t\t\t\t.then(result => {\n\t\t\t\t\tresponseClient(res, 200, 0, '操作成功 ！', data);\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.error('err :', err);\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t}\n\t})\n\t\t.populate([\n\t\t\t{ path: 'tags', select: '-_id' },\n\t\t\t{ path: 'category', select: '-_id' },\n\t\t\t{ path: 'comments', select: '-_id' },\n\t\t])\n\t\t.exec((err, doc) => {\n\t\t\t// console.log(\"doc:\");          // aikin\n\t\t\t// console.log(\"doc.tags:\",doc.tags);          // aikin\n\t\t\t// console.log(\"doc.category:\",doc.category);           // undefined\n\t\t});\n};\n\n// 文章详情\nexports.getArticleDetail = (req, res) => {\n\tlet { id } = req.body;\n\tlet type = Number(req.body.type) || 1; //文章类型 => 1: 普通文章，2: 简历，3: 管理员介绍\n\tconsole.log('type:', type);\n\tif (type === 1) {\n\t\tif (!id) {\n\t\t\tresponseClient(res, 200, 1, '文章不存在 ！');\n\t\t\treturn;\n\t\t}\n\t\tArticle.findOne({ _id: id }, (Error, data) => {\n\t\t\tif (Error) {\n\t\t\t\tconsole.error('Error:' + Error);\n\t\t\t\t// throw error;\n\t\t\t} else {\n\t\t\t\tdata.meta.views = data.meta.views + 1;\n\t\t\t\tArticle.updateOne({ _id: id }, { meta: data.meta })\n\t\t\t\t\t.then(result => {\n\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功 ！', data);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tconsole.error('err :', err);\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t\t.populate([\n\t\t\t\t{ path: 'tags',  },\n\t\t\t\t{ path: 'category',  },\n\t\t\t\t{ path: 'comments',  },\n\t\t\t])\n\t\t\t.exec((err, doc) => {\n\t\t\t\t// console.log(\"doc:\");          // aikin\n\t\t\t\t// console.log(\"doc.tags:\",doc.tags);          // aikin\n\t\t\t\t// console.log(\"doc.category:\",doc.category);           // undefined\n\t\t\t});\n\t} else {\n\t\tArticle.findOne({ type: type }, (Error, data) => {\n\t\t\tif (Error) {\n\t\t\t\tconsole.log('Error:' + Error);\n\t\t\t\t// throw error;\n\t\t\t} else {\n\t\t\t\tif (data) {\n\t\t\t\t\tdata.meta.views = data.meta.views + 1;\n\t\t\t\t\tArticle.updateOne({ type: type }, { meta: data.meta })\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功 ！', data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\tconsole.error('err :', err);\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresponseClient(res, 200, 1, '文章不存在 ！');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\t.populate([\n\t\t\t\t{ path: 'tags',  },\n\t\t\t\t{ path: 'category',  },\n\t\t\t\t{ path: 'comments',  },\n\t\t\t])\n\t\t\t.exec((err, doc) => {});\n\t}\n};\n\n```\n\n\n## 6.3 评论\n\n评论是有状态的：状态 => 0 待审核 / 1 通过正常 / -1 已删除 / -2 垃圾评论。\n管理一级和三级评论是设置前台能不能展示的，默认是展示，如果管理员看了，是条垃圾评论就 设置为 -1 或者 -2 ，进行隐藏，前台就不会展现了。\n\n```\nimport { responseClient } from '../util/util';\nimport Comment from '../models/comment';\nimport User from '../models/user';\nimport Article from '../models/article';\n\n//获取全部评论\nexports.getCommentList = (req, res) => {\n\tlet keyword = req.query.keyword || null;\n\tlet comment_id = req.query.comment_id || null;\n\tlet pageNum = parseInt(req.query.pageNum) || 1;\n\tlet pageSize = parseInt(req.query.pageSize) || 10;\n\tlet conditions = {};\n\tif (comment_id) {\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i'); //不区分大小写\n\t\t\tconditions = {\n\t\t\t\t_id: comment_id,\n\t\t\t\tcontent: { $regex: reg },\n\t\t\t};\n\t\t} else {\n\t\t\tconditions = {\n\t\t\t\t_id: comment_id,\n\t\t\t};\n\t\t}\n\t} else {\n\t\tif (keyword) {\n\t\t\tconst reg = new RegExp(keyword, 'i'); //不区分大小写\n\t\t\tconditions = {\n\t\t\t\tcontent: { $regex: reg },\n\t\t\t};\n\t\t}\n\t}\n\n\tlet skip = pageNum - 1 < 0 ? 0 : (pageNum - 1) * pageSize;\n\tlet responseData = {\n\t\tcount: 0,\n\t\tlist: [],\n\t};\n\tComment.countDocuments(conditions, (err, count) => {\n\t\tif (err) {\n\t\t\tconsole.error('Error:' + err);\n\t\t} else {\n\t\t\tresponseData.count = count;\n\t\t\t// 待返回的字段\n\t\t\tlet fields = {\n\t\t\t\tarticle_id: 1,\n\t\t\t\tcontent: 1,\n\t\t\t\tis_top: 1,\n\t\t\t\tlikes: 1,\n\t\t\t\tuser_id: 1,\n\t\t\t\tuser: 1,\n\t\t\t\tother_comments: 1,\n\t\t\t\tstate: 1,\n\t\t\t\tcreate_time: 1,\n\t\t\t\tupdate_time: 1,\n\t\t\t};\n\t\t\tlet options = {\n\t\t\t\tskip: skip,\n\t\t\t\tlimit: pageSize,\n\t\t\t\tsort: { create_time: -1 },\n\t\t\t};\n\t\t\tComment.find(conditions, fields, options, (error, result) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error:' + error);\n\t\t\t\t\t// throw error;\n\t\t\t\t} else {\n\t\t\t\t\tresponseData.list = result;\n\t\t\t\t\tresponseClient(res, 200, 0, '操作成功！', responseData);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\n// 添加一级评论\nexports.addComment = (req, res) => {\n\tif (!req.session.userInfo) {\n\t\tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t\treturn;\n\t}\n\tlet { article_id, user_id, content } = req.body;\n\tUser.findById({\n\t\t_id: user_id,\n\t})\n\t\t.then(result => {\n\t\t\t// console.log('result :', result);\n\t\t\tif (result) {\n\t\t\t\tlet userInfo = {\n\t\t\t\t\tuser_id: result._id,\n\t\t\t\t\tname: result.name,\n\t\t\t\t\ttype: result.type,\n\t\t\t\t\tavatar: result.avatar,\n\t\t\t\t};\n\t\t\t\tlet comment = new Comment({\n\t\t\t\t\tarticle_id: article_id,\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t\tuser: userInfo,\n\t\t\t\t});\n\t\t\t\tcomment\n\t\t\t\t\t.save()\n\t\t\t\t\t.then(commentResult => {\n\t\t\t\t\t\tArticle.findOne({ _id: article_id }, (errors, data) => {\n\t\t\t\t\t\t\tif (errors) {\n\t\t\t\t\t\t\t\tconsole.error('Error:' + errors);\n\t\t\t\t\t\t\t\t// throw errors;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdata.comments.push(commentResult._id);\n\t\t\t\t\t\t\t\tdata.meta.comments = data.meta.comments + 1;\n\t\t\t\t\t\t\t\tArticle.updateOne({ _id: article_id }, { comments: data.comments, meta: data.meta })\n\t\t\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功 ！', commentResult);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\t\t\tconsole.error('err :', err);\n\t\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err2 => {\n\t\t\t\t\t\tconsole.error('err :', err2);\n\t\t\t\t\t\tthrow err2;\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresponseClient(res, 200, 1, '用户不存在');\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('error :', error);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\n// 添加第三者评论\nexports.addThirdComment = (req, res) => {\n\tif (!req.session.userInfo) {\n\t\tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t\treturn;\n\t}\n\tlet { article_id, comment_id, user_id, content } = req.body;\n\n\tComment.findById({\n\t\t_id: comment_id,\n\t})\n\t\t.then(commentResult => {\n\t\t\tUser.findById({\n\t\t\t\t_id: user_id,\n\t\t\t})\n\t\t\t\t.then(userResult => {\n\t\t\t\t\tif (userResult) {\n\t\t\t\t\t\tlet userInfo = {\n\t\t\t\t\t\t\tuser_id: userResult._id,\n\t\t\t\t\t\t\tname: userResult.name,\n\t\t\t\t\t\t\ttype: userResult.type,\n\t\t\t\t\t\t\tavatar: userResult.avatar,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tlet item = {\n\t\t\t\t\t\t\tuser: userInfo,\n\t\t\t\t\t\t\tcontent: content,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tcommentResult.other_comments.push(item);\n\t\t\t\t\t\tComment.updateOne(\n\t\t\t\t\t\t\t{ _id: comment_id },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tother_comments: commentResult,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功', result);\n\t\t\t\t\t\t\t\tArticle.findOne({ _id: article_id }, (errors, data) => {\n\t\t\t\t\t\t\t\t\tif (errors) {\n\t\t\t\t\t\t\t\t\t\tconsole.error('Error:' + errors);\n\t\t\t\t\t\t\t\t\t\t// throw errors;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdata.meta.comments = data.meta.comments + 1;\n\t\t\t\t\t\t\t\t\t\tArticle.updateOne({ _id: article_id }, { meta: data.meta })\n\t\t\t\t\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log('result :', result);\n\t\t\t\t\t\t\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功 ！', result);\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('err :', err);\n\t\t\t\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(err1 => {\n\t\t\t\t\t\t\t\tconsole.error('err1:', err1);\n\t\t\t\t\t\t\t\tresponseClient(res);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseClient(res, 200, 1, '用户不存在');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tconsole.error('error :', error);\n\t\t\t\t\tresponseClient(res);\n\t\t\t\t});\n\t\t})\n\t\t.catch(error2 => {\n\t\t\tconsole.error('error2 :', error2);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\n// 管理一级评论\nexports.changeComment = (req, res) => {\n\tif (!req.session.userInfo) {\n\t\tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t\treturn;\n\t}\n\tlet { id, state } = req.body;\n\tComment.updateOne(\n\t\t{ _id: id },\n\t\t{\n\t\t\tstate: Number(state),\n\t\t},\n\t)\n\t\t.then(result => {\n\t\t\tresponseClient(res, 200, 0, '操作成功', result);\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.error('err:', err);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\n// 管理第三者评论\nexports.changeThirdComment = (req, res) => {\n\tif (!req.session.userInfo) {\n\t\tresponseClient(res, 200, 1, '您还没登录,或者登录信息已过期，请重新登录！');\n\t\treturn;\n\t}\n\tlet { comment_id, state, index } = req.body;\n\tComment.findById({\n\t\t_id: comment_id,\n\t})\n\t\t.then(commentResult => {\n\t\t\tlet i = index ? Number(index) : 0;\n\t\t\tif (commentResult.other_comments.length) {\n\t\t\t\tcommentResult.other_comments[i].state = Number(state);\n\t\t\t\tComment.updateOne(\n\t\t\t\t\t{ _id: comment_id },\n\t\t\t\t\t{\n\t\t\t\t\t\tother_comments: commentResult,\n\t\t\t\t\t},\n\t\t\t\t)\n\t\t\t\t\t.then(result => {\n\t\t\t\t\t\tresponseClient(res, 200, 0, '操作成功', result);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err1 => {\n\t\t\t\t\t\tconsole.error('err1:', err1);\n\t\t\t\t\t\tresponseClient(res);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresponseClient(res, 200, 1, '第三方评论不存在！', result);\n\t\t\t}\n\t\t})\n\t\t.catch(error2 => {\n\t\t\tconsole.log('error2 :', error2);\n\t\t\tresponseClient(res);\n\t\t});\n};\n\n```\n\n其他模块的具体需求，都是些常用的逻辑可以实现的，也很简单，这里就不展开讲了。\n\n\n# 7. Build Setup ( 构建安装 )\n\n``` \n# install dependencies\nnpm install \n\n# serve with hot reload at localhost: 3000\nnpm start \n\n# build for production with minification\n请使用 pm2 ，可以永久运行在服务器上，且不会一报错 node 程序就挂了。\n```\n\n# 8. 项目地址\n\n如果觉得该项目不错或者对你有所帮助，欢迎到 github 上给个 star，谢谢。\n\n**项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n> [blog：https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n**本博客系统的系列文章：**\n\n- 1. [react + node + express + ant + mongodb 的简洁兼时尚的博客网站](http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b)\n- 2. [react + Ant Design + 支持 markdown 的 blog-react 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7)\n- 3. [基于 node + express + mongodb 的 blog-node 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d)\n- 4. [服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的](http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240)\n\n\n# 9. 最后\n\n小汪也是第一次搭建 node 后端项目，也参考了其他项目。\n\n参考项目：\n[1. nodepress](https://github.com/surmon-china/nodepress)\n[2. React-Express-Blog-Demo](https://github.com/Nealyang/React-Express-Blog-Demo)\n\n对 **全栈开发** 有兴趣的朋友，可以扫下方二维码，关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发 等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n",
  "create_time": "2018-11-24T03:28:49.811Z",
  "update_time": "2018-11-24T03:28:49.812Z"
  },
  {
  "meta": {
  "views": 261,
  "likes": 0,
  "comments": 1
  },
  "keyword": [
  "react.js",
  "antd",
  "blog-react-admin"
  ],
  "desc": "此 blog-react-admin 项目是基于 [蚂蚁金服开源的 ant design pro](https://pro.ant.design/index-cn) 之上，用 react 全家桶 + Ant Design  的进行再次开发的，项目已经开源，项目地址在 github 上。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-f3b950acbffb944b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf405e1245730373274df55",
  "5bf0141cbc1e7805eb83dba0",
  "5bf013a6bc1e7805eb83db97"
  ],
  "comments": [
  "5bf7b64385e0f13af26e7d0b"
  ],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5bf798e185e0f13af26e7d08",
  "title": "项目文档说明：react + Ant Design 的 blog-react-admin ",
  "author": "biaochenxuying",
  "content": "![效果图](https://upload-images.jianshu.io/upload_images/12890819-f3b950acbffb944b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 前言\n\n此 blog-react-admin 项目是基于 [蚂蚁金服开源的 ant design pro](https://pro.ant.design/index-cn) 之上，用 react 全家桶 + Ant Design  的进行再次开发的，项目已经开源，项目地址在 github 上。\n\n效果预览 [https://preview.pro.ant.design/user/login](https://preview.pro.ant.design/user/login)\n\n# 1. 后台管理\n\n## 1.1 已经实现功能\n\n- [x] 登录  \n- [x] 文章管理（支持 MarkDown 语法）\n- [x] 标签管理  \n- [x] 留言管理\n- [x] 用户管理\n- [x] 友情链接管理\n- [x] 时间轴管理\n\n## 1.2 待实现功能\n\n- [ ] 点赞、留言和评论 的通知管理\n- [ ] 评论管理\n- [ ] 个人中心（用来设置博主的各种信息）\n- [ ] 工作台（ 接入百度统计接口，查看网站浏览量和用户访问等数据 ）\n\n# 2. 主要项目结构\n\n```\n- pages\n  - Account 博主个人中心\n  - article 文章管理\n  - Category 分类\n  - Dashboard 工作台\n  - Exection 403 404 500 等页面\n  - Link 链接管理\n  - Message 留言管理\n  - OtherUser 用户管理\n  - Tag 标签管理\n  - TimeAsix 时间轴\n  - User 登录注册管理\n```\n\n文章管理、用户管理、留言等 具体业务需求，都是些常用的逻辑可以实现的，也很简单，这里就不展开讲了。\n\n# 3. 使用\n\n使用详情请查看 [Ant Design Pro ](https://pro.ant.design/docs/getting-started-cn)，因为本项目也是在这个基础之上，按这个规范来构建的。\n\n# 4. 缺点\n\n开发时，程序出错后，修改正确后，webpack 有时不会及时查觉到内容已经更改，从而不能及时编译，要重新运行命令打包。\n\n# 5. 项目地址\n\n开源不易，如果觉得该项目不错或者对你有所帮助，欢迎到 github 上给个 star，谢谢。\n\n**项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n> [blog：https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n**本博客系统的系列文章：**\n\n- 1. [react + node + express + ant + mongodb 的简洁兼时尚的博客网站](http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b)\n- 2. [react + Ant Design + 支持 markdown 的 blog-react 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7)\n- 3. [基于 node + express + mongodb 的 blog-node 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d)\n- 4. [服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的](http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240)\n\n# 6. Build Setup ( 构建安装 )\n\n``` \n# install dependencies\nnpm install \n\n# serve with hot reload at localhost: 3000\nnpm start \n\n# build for production with minification\nnpm run build \n```\n\n如果要看完整的效果，是要和后台项目  **[blog-node](https://github.com/biaochenxuying/blog-node)** 一起运行才行的，不然接口请求会失败。\n\n# 7. 最后\n\n对 **全栈开发** 有兴趣的朋友可以扫下方二维码关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n",
  "create_time": "2018-11-23T06:06:25.422Z",
  "update_time": "2018-11-23T06:06:25.422Z"
  },
  {
  "meta": {
  "views": 359,
  "likes": 13,
  "comments": 1
  },
  "keyword": [
  "react",
  "Ant Design ",
  "支持 markdown ",
  "blog-react"
  ],
  "desc": "此 blog 项目是基于 react 全家桶 + Ant Design  的，项目已经开源，项目地址在 github 上。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-8420689b7238972a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf405e1245730373274df55"
  ],
  "comments": [
  "5c6cf3ac65ccc85fa0125e96"
  ],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5bf6bb5e85e0f13af26e57b7",
  "title": "react + Ant Design + 支持 markdown 的 blog-react 项目文档说明",
  "author": "biaochenxuying",
  "content": "![主页](https://upload-images.jianshu.io/upload_images/12890819-8420689b7238972a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 前言\n\n此 blog 项目是基于 react 全家桶 + Ant Design  的，项目已经开源，项目地址在 github 上。\n\n# 1. 效果\n\n![首页](https://upload-images.jianshu.io/upload_images/12890819-77a83e7ccd563d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n完整效果请看：[http://biaochenxuying.cn/main.html](http://biaochenxuying.cn/main.html)\n\n# 2. 功能描述\n\n## 2.1 已经实现功能\n\n- [x] 登录  \n- [x] 注册  \n- [x] 文章列表\n- [x] 标签分类  \n- [x] 个人介绍  \n- [x] 点赞与评论\n- [x] 留言\n- [x] 时间轴\n- [x] 发文（支持 MarkDown 语法）  \n- [x] 文章详情展示（支持代码语法高亮）\n\n## 2.2 待实现功能\n\n- [ ] 文章归档\n- [ ] 文章分类 \n- [ ] 文章详情的目录\n- [ ] 移动端适配\n- [ ] 升级 webpack 版本到 4.X\n\n# 3. 前端技术 \n\n## 3.1 主要技术 \n\n- react： 16.5.2\n- antd： 3.9.3\n- react-router:：4.3.1\n- webpack： 3.8.1\n- axios：0.18.0\n- redux: 4.0.0\n- highlight.js： 9.12.0\n- marked：0.5.1\n\n# 4. 项目搭建\n\n- 项目是按 antd 推荐的教程来搭建的：[antd 在 create-react-app 中使用](https://ant.design/docs/react/use-with-create-react-app-cn) , 实现了 按需加载组件代码和样式。\n\n# 5. 主要项目结构\n\n```\n- components\n  - article 文章详情\n  - articles 文章列表\n  - comments 评论\n  - loadEnd 加载完成\n  - loading 加载中\n  - login 登录\n  - message 留言\n  - nav 导航\n  - register 注册\n  - slider 右边栏（博主 logo 、链接和标签等）\n  - timeLine 时间轴\n- router 路由\n- store redux 的状态管理\n- utils 封装的常用的方法\n- views 框架页面\n```\n\n# 6. markdown 渲染\n\nmarkdown 渲染效果图: \n\n![markdown 渲染效果图](https://upload-images.jianshu.io/upload_images/12890819-cf92cfb3f222c4fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nreact 相关的支持 markdown 语法的有 react-markdown，但不支持表格的渲染，所以没用。\n\nmarkdown 渲染 采用了开源的 marked， 代码高亮用了 highlight.js 。\n\n用法：\n\n第一步：npm i marked highlight.js --save\n\n```\nnpm i marked highlight.js --save\n```\n\n第二步： 导入\n\n```\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n```\n\n第三步： 设置\n\n```\ncomponentWillMount() {\n\t\t// marked相关配置\n\t\tmarked.setOptions({\n\t\t\trenderer: new marked.Renderer(),\n\t\t\tgfm: true,\n\t\t\ttables: true,\n\t\t\tbreaks: true,\n\t\t\tpedantic: false,\n\t\t\tsanitize: true,\n\t\t\tsmartLists: true,\n\t\t\tsmartypants: false,\n\t\t\thighlight: function(code) {\n\t\t\t\treturn hljs.highlightAuto(code).value;\n\t\t\t},\n\t\t});\n\t}\n```\n第四步：\n```\n<div className=\"content\">\n\t<div\n\t\tid=\"content\"\n\t\tclassName=\"article-detail\"\n\t\tdangerouslySetInnerHTML={{\n\t\t      __html: this.state.articleDetail.content ? marked(this.state.articleDetail.content) : null,\n\t\t\t}}\n\t\t/>\n\t</div>\n```\n\n第五步：引入 monokai_sublime 的 css 样式\n\n```\n<link href=\"http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css\" rel=\"stylesheet\">\n```\n第六步：对 markdown 样式的补充\n\n如果不补充样式，是没有黑色背景的，字体大小等也会比较小，图片也不会居中显示\n\n```\n/*对 markdown 样式的补充*/\npre {\n    display: block;\n    padding: 10px;\n    margin: 0 0 10px;\n    font-size: 14px;\n    line-height: 1.42857143;\n    color: #abb2bf;\n    background: #282c34;\n    word-break: break-all;\n    word-wrap: break-word;\n    overflow: auto;\n}\nh1,h2,h3,h4,h5,h6{\n    margin-top: 1em;\n    /* margin-bottom: 1em; */\n}\nstrong {\n    font-weight: bold;\n}\n\np > code:not([class]) {\n    padding: 2px 4px;\n    font-size: 90%;\n    color: #c7254e;\n    background-color: #f9f2f4;\n    border-radius: 4px;\n}\np img{\n    /* 图片居中 */\n    margin: 0 auto;\n    display: flex;\n}\n\n#content {\n    font-family: \"Microsoft YaHei\",  'sans-serif';\n    font-size: 16px;\n    line-height: 30px;\n}\n\n#content .desc ul,#content .desc ol {\n    color: #333333;\n    margin: 1.5em 0 0 25px;\n}\n\n#content .desc h1, #content .desc h2 {\n    border-bottom: 1px solid #eee;\n    padding-bottom: 10px;\n}\n\n#content .desc a {\n    color: #009a61;\n}\n\n```\n\n# 6. 主页的满屏 飘花洒落 的效果\n\n![主页的 飘花洒落 的效果](https://upload-images.jianshu.io/upload_images/12890819-5915a8b8331a4def.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n大家也看到了，主页的满屏动态 飘花洒落 的效果很棒吧，这效果我也是网上找的，是在单独的一个 main.html 文件上的，代码链接如下：\n\n[主页的满屏 飘花洒落 的效果](https://github.com/biaochenxuying/blog-react/blob/master/public/main.html)\n\n# 7. 注意点\n\n## 7.1  打包的配置\n\n因为项目是用了 react-app-rewired (一个对 create-react-app 进行自定义配置的社区解决方案) 来打包了，所以如果你想修改 webpack.config.dev.js 和 webpack.config.prod.js 的配置，打包后可能看不到想要的效果，因为 react-app-rewired 打包时，是根据根目录的 config-overrides.js 来进行打包，**所以要修改 webpack 的配置的话，请修改 config-overrides.js 。**\n\n比如：关闭 sourceMap 和 支持装饰器 \n```\nconfig.devtool = false; // 关闭 sourceMap \nconfig = injectBabelPlugin('babel-plugin-transform-decorators-legacy', config); // 支持装饰器\n```\n\n## 7.2 关于 页面\n\n对于 关于 的页面，其实是一篇文章来的，根据文章类型 type 来决定的，数据库里面 type 为 3 \n 的文章，只能有一篇就是 博主介绍 ；达到了想什么时候修改内容都可以。\n\n所以当 this.props.location.pathname === '/about' 时就是请求类型为 博主介绍 的文章。\n\n```\ntype: 3, // 文章类型: 1：普通文章；2：是博主简历；3 ：是博主简介；\n```\n\n# 8. Build Setup ( 建立安装 )\n\n``` \n# install dependencies\nnpm install \n\n# serve with hot reload at localhost: 3000\nnpm start 或者 yarn start\n\n# build for production with minification\nnpm run build 或者 yarn run build\n```\n\n如果要看完整的效果，是要和后台项目  **[blog-node](https://github.com/biaochenxuying/blog-node)** 一起运行才行的，不然接口请求会失败。\n\n虽然引入了 mock 了，但是还没有时间做模拟数据，想看具体效果，请稳步到我的网站上查看 [http://biaochenxuying.cn/main.html](http://biaochenxuying.cn/main.html)\n\n# 最后\n\n其他具体的业务代码，都是些常会见到的需求，这里就不展开讲了。\n\n如果你觉得该文章不错，欢迎到我的 github，star 一下，谢谢。\n\n**项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n> [blog：https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n**本博客系统的系列文章：**\n\n- 1. [react + node + express + ant + mongodb 的简洁兼时尚的博客网站](http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b)\n- 2. [react + Ant Design + 支持 markdown 的 blog-react 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7)\n- 3. [基于 node + express + mongodb 的 blog-node 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d)\n- 4. [服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的](http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240)\n\n你以为本文就这么结束了 ?  **精彩在后面 ！！！**\n\n![](https://upload-images.jianshu.io/upload_images/12890819-a6be27522a86a0dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n对 **全栈开发** 有兴趣的朋友可以扫下方二维码关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发 等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n",
  "create_time": "2018-11-22T14:21:18.868Z",
  "update_time": "2018-11-22T14:21:18.868Z"
  },
  {
  "meta": {
  "views": 891,
  "likes": 180,
  "comments": 8
  },
  "keyword": [
  "react + node + express + ant + mongodb",
  "博客网站"
  ],
  "desc": "此项目是用于构建博客网站的，由三部分组成，包含前台展示、管理后台和后端。  此项目是基于 react + node + express + ant + mongodb 的，项目已经开源，项目地址在 github 上。",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-8420689b7238972a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf405e1245730373274df55",
  "5bf013c2bc1e7805eb83db9b",
  "5bf013bbbc1e7805eb83db9a"
  ],
  "comments": [
  "5bf77f7a85e0f13af26e7d07",
  "5bfb91fbb54f044b4f9dccca",
  "5c0e4606b54f044b4f9ddee6",
  "5c1a2029b54f044b4f9ddfca",
  "5c242033b54f044b4f9de0a8"
  ],
  "category": [
  "5bf014f9bc1e7805eb83dba9",
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5bf57a8f85e0f13af26e579b",
  "title": "react + node + express + ant + mongodb 的简洁兼时尚的博客网站",
  "author": "biaochenxuying",
  "content": "![首页](https://upload-images.jianshu.io/upload_images/12890819-8420689b7238972a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 前言\n\n此项目是用于构建博客网站的，由三部分组成，包含前台展示、管理后台和后端。\n\n此项目是基于 react + node + express + ant + mongodb 的，项目已经开源，项目地址在 github 上，喜欢的，欢迎给个 star 。\n\n**项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n\n# 1. 效果图\n\n## 1.1 前台展示\n\n效果图：\n\n- 移动端适配\n\n![mobile.gif](https://upload-images.jianshu.io/upload_images/12890819-f97e98dfa9ac76b8.gif?imageMogr2/auto-orient/strip)\n\n- pc 端\n![首页](https://upload-images.jianshu.io/upload_images/12890819-77a83e7ccd563d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![标签分类文章](https://upload-images.jianshu.io/upload_images/12890819-75077f31adba4e0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![留言](https://upload-images.jianshu.io/upload_images/12890819-df86bfde538ad847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![时间轴](https://upload-images.jianshu.io/upload_images/12890819-dfc3b4cdfc6c090e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![登录](https://upload-images.jianshu.io/upload_images/12890819-2aa33d298d40289f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![注册](https://upload-images.jianshu.io/upload_images/12890819-a9343e10c5124575.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![文章详情-1](https://upload-images.jianshu.io/upload_images/12890819-5b71a668c63bd5f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![文章详情-2](https://upload-images.jianshu.io/upload_images/12890819-cd2116448bb60d82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![文章详情-3](https://upload-images.jianshu.io/upload_images/12890819-ecc8c87d241032c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![点赞与评论](https://upload-images.jianshu.io/upload_images/12890819-b3586795aec15908.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n前台展示目前只支持 pc 端。\n\n## 1.2 管理后台\n\n管理后台是在蚂蚁金服用户开源的 [ANT DESIGN PRO](https://ant.design/docs/react/introduce-cn) 基础上进行开发的。\n\n![登录](https://upload-images.jianshu.io/upload_images/12890819-1e86b95f023b5249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![用户](https://upload-images.jianshu.io/upload_images/12890819-3b54d275905eff8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![文章](https://upload-images.jianshu.io/upload_images/12890819-857a69d08f96bdf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![文章添加](https://upload-images.jianshu.io/upload_images/12890819-78346a025a6dd027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![留言](https://upload-images.jianshu.io/upload_images/12890819-57cefe4d0fe4b62c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![留言回复](https://upload-images.jianshu.io/upload_images/12890819-73e9b633b5c3c300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![链接](https://upload-images.jianshu.io/upload_images/12890819-af023ebd4a37f06a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![时间轴](https://upload-images.jianshu.io/upload_images/12890819-941be69fa7c3a302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![时间轴添加](https://upload-images.jianshu.io/upload_images/12890819-24717edf8511eed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![标签](https://upload-images.jianshu.io/upload_images/12890819-d470dd2a56f8b6d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![分类](https://upload-images.jianshu.io/upload_images/12890819-2755d70c2bd860b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n# 2. 体验地址\n\n- [网站主页： http://biaochenxuying.cn/main.html ](http://biaochenxuying.cn/main.html)\n- [网站首页：http://biaochenxuying.cn/](http://biaochenxuying.cn/)\n- [管理后台：https://preview.pro.ant.design/user/login](https://preview.pro.ant.design/user/login)\n\n# 3. 计划\n\n这次是一个完整的全栈式开发，只要部署了这三个项目的代码，是完全可以搭建好博客网站的。\n\n作为一个后端的小白，在这次开发中，小汪也遇到了很多问题。\n\n**往后的时间里，我会就这三个项目，推出相应的三篇文章教程或者说明和踩到的坑，敬请期待。**\n\n# 4. 收获与感触\n\n学而不用，基本等于没学，所以为了有  react 相关的技术栈的实战经验，所以用了 react ，而且后端技术 node.js 和 mongodb 也是这一个多月里现学现用的，所以项目中肯定还有很多我不知道的实用技巧，如果写的不好的地方，请大家指出。\n\n网站前端部分如果用 vue 相关技术栈来完成的话，会更好更快，因为本人专长的是 vue 相关的技术栈。\n\n因为最近一直在做自己的个人博客网站，所以好久没更新技术文章了；而且是利用业余时间做的，所以经过差不多两个月的搬砖，现在网站终于都上线了。\n\n开发网站的这段时间里，每天晚上几乎都搬砖到接近 11 点，周末的时间大多也在搬砖，今晚写完这篇文章，也快 12 点了，搬砖不易啊，喜欢或者觉得不错的，欢迎到 github 上给个 star，谢谢。\n\n# 5. 文档教程\n\n**项目地址：**\n> [前台展示: https://github.com/biaochenxuying/blog-react](https://github.com/biaochenxuying/blog-react)\n\n> [管理后台：https://github.com/biaochenxuying/blog-react-admin](https://github.com/biaochenxuying/blog-react-admin)\n\n> [后端：https://github.com/biaochenxuying/blog-node](https://github.com/biaochenxuying/blog-node)\n\n> [blog：https://github.com/biaochenxuying/blog](https://github.com/biaochenxuying/blog)\n\n**本博客系统的系列文章：**\n\n- 1. [react + node + express + ant + mongodb 的简洁兼时尚的博客网站](http://biaochenxuying.cn/articleDetail?article_id=5bf57a8f85e0f13af26e579b)\n- 2. [react + Ant Design + 支持 markdown 的 blog-react 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf6bb5e85e0f13af26e57b7)\n- 3. [基于 node + express + mongodb 的 blog-node 项目文档说明](http://biaochenxuying.cn/articleDetail?article_id=5bf8c57185e0f13af26e7d0d)\n- 4. [服务器小白的我,是如何将node+mongodb项目部署在服务器上并进行性能优化的](http://biaochenxuying.cn/articleDetail?article_id=5bfa728bb54f044b4f9da240)\n\n# 最后\n\n对 **全栈开发** 有兴趣的朋友可以扫下方二维码关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)",
  "create_time": "2018-11-21T15:32:31.249Z",
  "update_time": "2018-11-21T15:32:31.249Z"
  },
  {
  "meta": {
  "views": 226,
  "likes": 131,
  "comments": 11
  },
  "keyword": [
  "js 日期对象 31 号",
  "setMonth 的锅"
  ],
  "desc": "需求：获取当前日期的前一个月份,当月有 31 天时，JS 日期对象 setMonth 问题",
  "img_url": "https://upload-images.jianshu.io/upload_images/12890819-80fa7517ab3f2783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
  "type": 1,
  "state": 1,
  "origin": 0,
  "tags": [
  "5bf013a6bc1e7805eb83db97"
  ],
  "comments": [
  "5bf64bfb85e0f13af26e57a1",
  "5bf76f8585e0f13af26e6b97",
  "5c09e4f7b54f044b4f9ddcba"
  ],
  "category": [
  "5bf014e8bc1e7805eb83dba7"
  ],
  "_id": "5bf4bd41245730373274df69",
  "title": "js 日期对象 31 号, setMonth 的锅",
  "author": "biaochenxuying",
  "content": "![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-80fa7517ab3f2783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 前言\n\n需求：获取当前日期的前一个月份\n\n**当月有 31 天时，JS 日期对象 setMonth 问题**\n\n## 1. 一般做法\n\n当前日期如果不是 31 号, 是没问题的，是 31 号就会有问题：\n```\n// 比如今天是 2018-09-30 号，前一个月应该是 2018-08-30 \nlet now = new Date(new Date(\"2018-09-30\").setMonth(new Date(\"2018-09-30\").getMonth() - 1))\nconsole.log('now :', now.toLocaleString())\n// now : 2018/8/30 上午8:00:00\n\n// 比如今天是 2018-10-31 号，前一个月没有 31 号，所以结果 2018-10-01：\nlet now = new Date(new Date(\"2018-10-31\").setMonth(new Date(\"2018-10-31\").getMonth() - 1))\nconsole.log('now :', now.toLocaleString())\n// now : 2018/10/1 上午8:00:00\n```\n## 2. 正确的方法：\n#### 2.1 方法一 \n原理： 当前时间减去当前时间的天数\n```\n\nfunction initLastMonth(date) {\n            let monthDate = new Date(date);\n            let newDate = new Date(monthDate.getTime() - 24 * 60 * 60 * 1000 * monthDate.getDate())\n            console.log('newDate :', newDate.toLocaleString())\n          return newDate\n}\ninitLastMonth(\"2018-10-31\")\n//  newDate : 2018/9/30 上午8:00:00\n```\n\n#### 2.2 方法二 \n\n原理： setMonth 之前先 setDate(1)\n\n```\nfunction initLastMonth(date) {\n            const now = new Date(date);\n            now.setDate(1)\n            now.setMonth(now.getMonth() - 1)\n            console.log(now.toLocaleString()) \n            return now\n        }\ninitLastMonth(\"2018-10-31\")\n// 2018/9/1 上午8:00:00\n```\n\n# 最后\n\n技术文章更新地址：[github](https://github.com/biaochenxuying/blog)\n\n对 **全栈开发** 有兴趣的朋友可以扫下方二维码关注我的公众号，我会不定期更新有价值的内容。\n\n> 微信公众号：**BiaoChenXuYing**\n> 分享 前端、后端开发等相关的技术文章，热点资源，全栈程序员的成长之路。\n\n关注公众号并回复 **福利** 便免费送你视频资源，绝对干货。\n\n福利详情请点击：  [免费资源分享--Python、Java、Linux、Go、node、vue、react、javaScript](https://mp.weixin.qq.com/s?__biz=MzA4MDU1MDExMg==&mid=2247483711&idx=1&sn=1ffb576159805e92fc57f5f1120fce3a&chksm=9fa3c0b0a8d449a664f36f6fdd017ac7da71b6a71c90261b06b4ea69b42359255f02d0ffe7b3&token=1560489745&lang=zh_CN#rd)\n\n![BiaoChenXuYing](https://upload-images.jianshu.io/upload_images/12890819-091ccce387e2ea34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)",
  "create_time": "2018-11-21T02:04:49.839Z",
  "update_time": "2018-11-21T02:04:49.839Z"
  }
  ]
  }
  }